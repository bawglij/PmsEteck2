// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

namespace PmsEteck.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("pms")
                .HasAnnotation("ProductVersion", "3.0.0-preview.19074.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PmsEteck.Data.InvoiceCheck", b =>
                {
                    b.Property<int>("InvoiceCheckID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckDateTime");

                    b.Property<int>("InvoiceCheckOptionID");

                    b.Property<int>("InvoiceID");

                    b.Property<string>("Message")
                        .HasMaxLength(250);

                    b.Property<bool>("Valid");

                    b.HasKey("InvoiceCheckID");

                    b.HasIndex("InvoiceCheckOptionID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("InvoiceChecks","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Address", b =>
                {
                    b.Property<int>("iAddressKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Closed");

                    b.Property<int?>("CollectiveAddressID");

                    b.Property<bool>("CostlierServiceActive");

                    b.Property<bool>("IsCollectiveAddress");

                    b.Property<bool>("IsIndoorInstallation");

                    b.Property<decimal>("MaxLossOfDistribution")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("MaxPollTax")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("ObjectID");

                    b.Property<decimal>("PercentLossOfDistribution")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentPollTax")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("dBVO");

                    b.Property<decimal?>("dColdElectricPower");

                    b.Property<decimal?>("dContractedCapacityEnergy");

                    b.Property<decimal?>("dContractedCapacityGas");

                    b.Property<decimal?>("dHeatElectricPower");

                    b.Property<decimal?>("dLatitude")
                        .HasColumnType("decimal(9, 7)");

                    b.Property<decimal?>("dLongitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<decimal?>("dTapWaterPower");

                    b.Property<int?>("iAddressType");

                    b.Property<int?>("iCategory");

                    b.Property<int>("iNumber");

                    b.Property<int>("iProjectKey");

                    b.Property<int?>("iServiceRunKey");

                    b.Property<string>("sAddressComment")
                        .HasMaxLength(150);

                    b.Property<string>("sCity")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sConnectionTypeKey")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.Property<string>("sFineCode")
                        .HasMaxLength(10);

                    b.Property<string>("sNumberAddition")
                        .HasMaxLength(10);

                    b.Property<string>("sPostalCode")
                        .IsRequired()
                        .HasMaxLength(7);

                    b.Property<string>("sStreetName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iAddressKey");

                    b.HasIndex("CollectiveAddressID");

                    b.HasIndex("iProjectKey");

                    b.HasIndex("iServiceRunKey");

                    b.HasIndex("sConnectionTypeKey");

                    b.ToTable("Addresses","pms");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AddressDebtor", b =>
                {
                    b.Property<int>("iAddressDebtorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingTypeID");

                    b.Property<bool>("bFinished");

                    b.Property<bool>("bIsActive");

                    b.Property<DateTime?>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iAddressID");

                    b.Property<int>("iDebtorID");

                    b.HasKey("iAddressDebtorID");

                    b.HasIndex("BillingTypeID");

                    b.HasIndex("iAddressID");

                    b.HasIndex("iDebtorID");

                    b.ToTable("AddressDebtors","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AddressOccupant", b =>
                {
                    b.Property<int>("iAdressOccupantID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bIsActive");

                    b.Property<DateTime?>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iAddressID");

                    b.Property<int>("iOccupantID");

                    b.HasKey("iAdressOccupantID");

                    b.HasIndex("iAddressID");

                    b.HasIndex("iOccupantID");

                    b.ToTable("AddressOccupants","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AddressRateCard", b =>
                {
                    b.Property<int>("iAddressKey");

                    b.Property<int>("iRateCardKey");

                    b.Property<DateTime?>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.HasKey("iAddressKey", "iRateCardKey");

                    b.HasIndex("iRateCardKey");

                    b.ToTable("AddressRateCards");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("DuoAuthenticatorSecretKey");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDuoAuthenticatorEnabled");

                    b.Property<bool?>("IsLocked");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("MaintenanceContactID");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("sFirstName")
                        .HasMaxLength(150);

                    b.Property<string>("sLastName")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceContactID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationUserGroup", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("GroupId");

                    b.Property<string>("ApplicationUserId");

                    b.Property<int?>("UserGroupId");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("UserGroupId");

                    b.ToTable("ApplicationUserGroup");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationUserRoleGroup", b =>
                {
                    b.Property<int>("RoleGroupId");

                    b.Property<string>("UserId");

                    b.HasKey("RoleGroupId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoleGroups","pms");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AssetManager", b =>
                {
                    b.Property<int>("iAssetManagerKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sFirstName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("sLastName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iAssetManagerKey");

                    b.ToTable("AssetManager");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AverageMonthConsumption", b =>
                {
                    b.Property<int>("AverageMonthConsumptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Consumption");

                    b.Property<int>("CounterTypeID");

                    b.Property<int>("Month");

                    b.Property<int>("ProjectID");

                    b.Property<int>("UnitID");

                    b.Property<int>("Year");

                    b.HasKey("AverageMonthConsumptionID");

                    b.HasIndex("CounterTypeID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("UnitID");

                    b.ToTable("AverageMonthConsumptions","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BaseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateModified");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("BaseModels");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseModel");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BillingType", b =>
                {
                    b.Property<int>("BillingTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(150);

                    b.Property<int>("Order");

                    b.HasKey("BillingTypeID");

                    b.ToTable("BillingTypes","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BlindConsumption", b =>
                {
                    b.Property<int>("iBlindConsumptionKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dBlindConsumption");

                    b.Property<DateTime>("dtEndDateTime");

                    b.Property<DateTime>("dtStartDateTime");

                    b.Property<int>("iAddressKey");

                    b.Property<int>("iCounterKey");

                    b.Property<int>("iServiceRunKey");

                    b.HasKey("iBlindConsumptionKey");

                    b.HasIndex("iAddressKey");

                    b.HasIndex("iCounterKey");

                    b.HasIndex("iServiceRunKey");

                    b.ToTable("BlindConsumptions","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Budget", b =>
                {
                    b.Property<long>("iFactBudgetKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("dcAmountBudget");

                    b.Property<int?>("iBudgetDimensionKey");

                    b.Property<int?>("iBudgetVersionKey");

                    b.Property<int?>("iCustomerID");

                    b.Property<int?>("iLedgerKey");

                    b.Property<int?>("iPartnerID");

                    b.Property<int?>("iProjectKey");

                    b.Property<int?>("iUserKey");

                    b.Property<int?>("iYear");

                    b.Property<string>("sComment")
                        .HasMaxLength(255);

                    b.Property<string>("sPeriod")
                        .HasMaxLength(10);

                    b.Property<int?>("sReportingCode");

                    b.Property<int?>("sReportingCode_old");

                    b.HasKey("iFactBudgetKey");

                    b.HasIndex("iBudgetDimensionKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("FactBudget","dbo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetBase", b =>
                {
                    b.Property<int>("iBudgetBaseKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<int>("iBudgetBaseTypeKey");

                    b.Property<int>("iCustomerID");

                    b.Property<int>("iYear");

                    b.Property<string>("sDescription")
                        .HasMaxLength(250);

                    b.HasKey("iBudgetBaseKey");

                    b.HasIndex("iBudgetBaseTypeKey");

                    b.HasIndex("iCustomerID");

                    b.ToTable("BudgetBases","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetBaseType", b =>
                {
                    b.Property<int>("iBudgetBaseTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sBudgetBaseTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iBudgetBaseTypeKey");

                    b.ToTable("BudgetBaseTypes","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetDimension", b =>
                {
                    b.Property<int>("iBudgetDimensionKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BaseOnDefaultProfile");

                    b.Property<Guid?>("BudgetReferenceId");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<int?>("StartMonth");

                    b.Property<bool>("bDraft");

                    b.Property<DateTime>("dtLastModified");

                    b.Property<int>("iBudgetBaseKey");

                    b.Property<int>("iBudgetDimensionTypeKey");

                    b.Property<int>("iBudgetSettingKey");

                    b.Property<int>("iEndPeriodPreview");

                    b.Property<int?>("iProjectKey");

                    b.Property<int>("iYearBudget");

                    b.Property<int>("iYearPreview");

                    b.Property<string>("sBudgetDimensionDescription")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("iBudgetDimensionKey");

                    b.HasIndex("BudgetReferenceId");

                    b.HasIndex("iBudgetBaseKey");

                    b.HasIndex("iBudgetDimensionTypeKey");

                    b.HasIndex("iBudgetSettingKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("BudgetDimensions","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetDimensionRule", b =>
                {
                    b.Property<int>("iBudgetDimensionRuleKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PercentApril")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentAugust")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentDecember")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentFebruary")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentJanuary")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentJuly")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentJune")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentMarch")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentMay")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentNovember")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentOctober")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PercentSeptember")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<bool>("bSpatie");

                    b.Property<bool>("bSubtotaal");

                    b.Property<decimal>("dApril");

                    b.Property<decimal>("dAugust");

                    b.Property<decimal>("dDecember");

                    b.Property<decimal>("dFebruary");

                    b.Property<decimal>("dJanuary");

                    b.Property<decimal>("dJuly");

                    b.Property<decimal>("dJune");

                    b.Property<decimal>("dMarch");

                    b.Property<decimal>("dMay");

                    b.Property<decimal>("dNovember");

                    b.Property<decimal>("dOctober");

                    b.Property<decimal>("dSeptember");

                    b.Property<decimal>("dTotal");

                    b.Property<int>("iBudgetDimensionKey");

                    b.Property<int>("iRecNo");

                    b.Property<int>("iReportingStructureKey");

                    b.Property<string>("sComment")
                        .HasMaxLength(255);

                    b.HasKey("iBudgetDimensionRuleKey");

                    b.HasIndex("iBudgetDimensionKey");

                    b.HasIndex("iReportingStructureKey");

                    b.ToTable("BudgetDimensionRules","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetDimensionType", b =>
                {
                    b.Property<int>("iBudgetDimensionTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sBudgetDimensionTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iBudgetDimensionTypeKey");

                    b.ToTable("BudgetDimensionTypes","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetSectionIndex", b =>
                {
                    b.Property<int>("iBudgetSectionIndexKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bFixedPart");

                    b.Property<bool>("bSpatie");

                    b.Property<bool>("bSubtotaal");

                    b.Property<bool>("bVariable");

                    b.Property<decimal>("dFixedPart");

                    b.Property<decimal>("dSectionIndex");

                    b.Property<int>("iBudgetSettingKey");

                    b.Property<int>("iRecNo");

                    b.Property<int>("iReportingStructureKey");

                    b.HasKey("iBudgetSectionIndexKey");

                    b.HasIndex("iBudgetSettingKey");

                    b.HasIndex("iReportingStructureKey");

                    b.ToTable("BudgetSectionIndex","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetSetting", b =>
                {
                    b.Property<int>("iBudgetSettingKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dtCreatedDate");

                    b.HasKey("iBudgetSettingKey");

                    b.ToTable("BudgetSettings","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BuildingManagementSystem", b =>
                {
                    b.Property<int>("BuildingManagementSystemID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommunicationTypeID");

                    b.Property<string>("Credentials")
                        .HasMaxLength(250);

                    b.Property<string>("IpPhoneNumber")
                        .HasMaxLength(100);

                    b.Property<int>("ProjectID");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(250);

                    b.Property<string>("TypeManager")
                        .HasMaxLength(250);

                    b.HasKey("BuildingManagementSystemID");

                    b.HasIndex("CommunicationTypeID");

                    b.HasIndex("ProjectID");

                    b.ToTable("BuildingManagementSystems","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CO2Constant", b =>
                {
                    b.Property<int>("iCO2ConstantKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dtCreateDateTime");

                    b.Property<string>("sCreatedBy")
                        .IsRequired();

                    b.HasKey("iCO2ConstantKey");

                    b.ToTable("CO2Constants");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CO2ConstantRow", b =>
                {
                    b.Property<int>("iCO2ConstantRowKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dCO2ConstantRowValue")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("iCO2ConstantKey");

                    b.Property<string>("sCO2ConstantRowName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sCO2ConstantRowSource")
                        .HasMaxLength(150);

                    b.Property<string>("sCO2ConstantRowUnit")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("iCO2ConstantRowKey");

                    b.HasIndex("iCO2ConstantKey");

                    b.ToTable("CO2ConstantRows");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CalcCategory", b =>
                {
                    b.Property<int>("iCalcCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sCalcCategory")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iCalcCategoryKey");

                    b.ToTable("CalcCategories");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CalcMutation", b =>
                {
                    b.Property<int>("iCalcMutationKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dAmount");

                    b.Property<DateTime>("dtDate");

                    b.Property<int>("iCalcCategoryKey");

                    b.Property<int>("iPeriod");

                    b.Property<int>("iProjectKey");

                    b.Property<int>("iYear");

                    b.Property<string>("sDescription")
                        .HasMaxLength(250);

                    b.HasKey("iCalcMutationKey");

                    b.HasIndex("iCalcCategoryKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("CalcMutations");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CalcRule", b =>
                {
                    b.Property<int>("iProjectKey");

                    b.Property<decimal>("dEnergyCostsCooling");

                    b.Property<decimal>("dEnergyCostsHeating");

                    b.Property<decimal>("dIndexEnergyCosts");

                    b.Property<decimal>("dIndexEnergySales");

                    b.Property<decimal>("dIndexOtherCosts");

                    b.Property<decimal>("dIndexStandingCharge");

                    b.HasKey("iProjectKey");

                    b.ToTable("CalcRules");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CalculationType", b =>
                {
                    b.Property<int>("iCalculationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sName")
                        .HasMaxLength(50);

                    b.HasKey("iCalculationTypeID");

                    b.ToTable("CalculationType");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ChangeReason", b =>
                {
                    b.Property<int>("iChangeReasonKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iChangeReasonKey");

                    b.ToTable("ChangeReasons","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CommunicationType", b =>
                {
                    b.Property<int>("ComunicationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("ComunicationTypeID");

                    b.ToTable("CommunicationTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ConnectionType", b =>
                {
                    b.Property<string>("sConnectionTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2);

                    b.Property<bool>("IsStandingRight");

                    b.Property<bool>("bActive");

                    b.Property<bool>("bConsumptionMeterRequired");

                    b.Property<string>("sConnectionTypeDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("sConnectionTypeKey");

                    b.ToTable("ConnectionTypes","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Consumption", b =>
                {
                    b.Property<int>("iConsumptionKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bExcludeForReport");

                    b.Property<bool>("bValidated");

                    b.Property<decimal>("dConsumption")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dEndPosition")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<DateTime>("dtEndDateTime");

                    b.Property<DateTime>("dtStartDateTime");

                    b.Property<int?>("iAddressKey");

                    b.Property<int?>("iConsumptionUnvalidatedID");

                    b.Property<int>("iCounterKey");

                    b.Property<int>("iServiceRunKey");

                    b.HasKey("iConsumptionKey");

                    b.HasIndex("iAddressKey");

                    b.HasIndex("iConsumptionUnvalidatedID");

                    b.HasIndex("iCounterKey");

                    b.HasIndex("iServiceRunKey");

                    b.ToTable("Consumption","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ConsumptionMeter", b =>
                {
                    b.Property<int>("iConsumptionMeterKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bMeterCalibrationPool");

                    b.Property<bool>("bMeterDeleted");

                    b.Property<bool>("bVisibleForCustomers");

                    b.Property<int?>("iAddressKey");

                    b.Property<int>("iBuildYear");

                    b.Property<int>("iConsumptionMeterSupplierKey");

                    b.Property<int>("iDaysMargin");

                    b.Property<int?>("iEnergySupplierID");

                    b.Property<int?>("iEsighMeterID");

                    b.Property<int>("iFrequencyKey");

                    b.Property<int?>("iMeasuringOfficerID");

                    b.Property<int>("iMeterTypeKey");

                    b.Property<int?>("iOperatorID");

                    b.Property<int?>("iServiceRunKey");

                    b.Property<string>("sConsumptionMeterComment")
                        .HasMaxLength(150);

                    b.Property<string>("sConsumptionMeterNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sEANCode")
                        .HasMaxLength(100);

                    b.Property<string>("sMeterCodeEsight")
                        .HasMaxLength(15);

                    b.Property<string>("sMeterPoolCode")
                        .HasMaxLength(100);

                    b.HasKey("iConsumptionMeterKey");

                    b.HasIndex("iAddressKey");

                    b.HasIndex("iConsumptionMeterSupplierKey");

                    b.HasIndex("iEnergySupplierID");

                    b.HasIndex("iFrequencyKey");

                    b.HasIndex("iMeasuringOfficerID");

                    b.HasIndex("iMeterTypeKey");

                    b.HasIndex("iOperatorID");

                    b.HasIndex("iServiceRunKey");

                    b.ToTable("ConsumptionMeters","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ConsumptionMeterSupplier", b =>
                {
                    b.Property<int>("iConsumptionMeterSupplierKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sConsumptionMeterSupplier")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iConsumptionMeterSupplierKey");

                    b.ToTable("ConsumptionMeterSuppliers","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ConsumptionUnvalidated", b =>
                {
                    b.Property<int>("iConsumptionUnvalidatedID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<bool>("bValidated");

                    b.Property<decimal>("dPosition");

                    b.Property<DateTime>("dtImportDateTime");

                    b.Property<DateTime>("dtReadingDate");

                    b.Property<int>("iAddressKey");

                    b.Property<int>("iCounterKey");

                    b.Property<int>("iServiceRunKey");

                    b.Property<string>("sValidatedBy");

                    b.HasKey("iConsumptionUnvalidatedID");

                    b.HasIndex("iAddressKey");

                    b.HasIndex("iCounterKey");

                    b.HasIndex("iServiceRunKey");

                    b.ToTable("ConsumptionUnvalidated","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Contact", b =>
                {
                    b.Property<int>("iContactKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iContactTypeKey");

                    b.Property<int>("iProjectKey");

                    b.Property<string>("sContactName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sDescription")
                        .HasMaxLength(250);

                    b.Property<string>("sEmail")
                        .HasMaxLength(100);

                    b.Property<string>("sOrganisation")
                        .HasMaxLength(50);

                    b.Property<string>("sTelephone")
                        .HasMaxLength(50);

                    b.Property<string>("sTitle")
                        .HasMaxLength(50);

                    b.HasKey("iContactKey");

                    b.HasIndex("iContactTypeKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ContactType", b =>
                {
                    b.Property<int>("iContactTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sContactTypeName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iContactTypeKey");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CostlierValue", b =>
                {
                    b.Property<int>("CostlierValueID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID");

                    b.Property<DateTime>("DateTime");

                    b.Property<decimal>("LossOfDistribution")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("PollTax")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("TotalConsumption")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("TotalCostlier")
                        .HasColumnType("decimal(18, 5)");

                    b.HasKey("CostlierValueID");

                    b.HasIndex("AddressID");

                    b.ToTable("CostlierValues","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Counter", b =>
                {
                    b.Property<int>("iCounterKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DefaultPercentageDeviationFromAverage");

                    b.Property<decimal>("PercentageDeviationFromAverage")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("StatusChangeDescription")
                        .HasMaxLength(500);

                    b.Property<string>("StatusDescription")
                        .HasMaxLength(500);

                    b.Property<int?>("StatusID");

                    b.Property<bool>("bActive");

                    b.Property<bool>("bHasTurnOverRatio");

                    b.Property<decimal>("dCorrectionMutation");

                    b.Property<int?>("iCompletedRounds");

                    b.Property<int?>("iConsumptionMeterKey");

                    b.Property<int>("iCounterTypeKey");

                    b.Property<int?>("iMaxCounterValue");

                    b.Property<int?>("iServiceRunKey");

                    b.Property<int>("iTurnOverRatioFrom");

                    b.Property<int>("iTurnOverRatioTo");

                    b.Property<int>("iUnitKey");

                    b.Property<string>("sCounterCode")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iCounterKey");

                    b.HasIndex("StatusID");

                    b.HasIndex("iConsumptionMeterKey");

                    b.HasIndex("iCounterTypeKey");

                    b.HasIndex("iServiceRunKey");

                    b.HasIndex("iUnitKey");

                    b.ToTable("Counters","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterChangeLog", b =>
                {
                    b.Property<int>("iCounterChangeLogKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dEndPosition")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<DateTime>("dtEffectiveDateTime");

                    b.Property<DateTime>("dtEventCreated");

                    b.Property<int?>("iConsumptionMeterKeyFrom");

                    b.Property<int?>("iConsumptionMeterKeyTo");

                    b.Property<int>("iCounterKey");

                    b.Property<int>("iEventKey");

                    b.Property<int?>("iExchangeFormKey");

                    b.Property<int?>("iMeterChangeKey");

                    b.Property<string>("sUser")
                        .IsRequired();

                    b.HasKey("iCounterChangeLogKey");

                    b.HasIndex("iConsumptionMeterKeyFrom");

                    b.HasIndex("iConsumptionMeterKeyTo");

                    b.HasIndex("iCounterKey");

                    b.HasIndex("iEventKey");

                    b.HasIndex("iExchangeFormKey");

                    b.HasIndex("iMeterChangeKey");

                    b.ToTable("CounterChangeLogs","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterType", b =>
                {
                    b.Property<int>("iCounterTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<bool>("bCanExchange");

                    b.Property<int>("iOrder");

                    b.Property<string>("sCounterTypeDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iCounterTypeKey");

                    b.ToTable("CounterTypes","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterYearConsumption", b =>
                {
                    b.Property<int>("CounterYearConsumptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Consumption")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("CounterID");

                    b.Property<int>("Year");

                    b.HasKey("CounterYearConsumptionID");

                    b.HasIndex("CounterID");

                    b.ToTable("CounterYearConsumptions","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Customer", b =>
                {
                    b.Property<int>("iCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CustomerMetacom");

                    b.Property<bool>("CustomerNavision");

                    b.Property<string>("NavisionPrefix")
                        .HasMaxLength(30);

                    b.Property<bool>("bActive");

                    b.Property<bool>("bParent");

                    b.Property<int>("iGroupID");

                    b.Property<int>("iPartnerID");

                    b.Property<string>("sAddress")
                        .HasMaxLength(100);

                    b.Property<string>("sCity")
                        .HasMaxLength(100);

                    b.Property<string>("sClientcode")
                        .HasMaxLength(100);

                    b.Property<string>("sCocnumber")
                        .HasMaxLength(100);

                    b.Property<string>("sCountry")
                        .HasMaxLength(50);

                    b.Property<string>("sDescription");

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sPostalcode")
                        .HasMaxLength(20);

                    b.Property<string>("sSbicode")
                        .HasMaxLength(100);

                    b.HasKey("iCustomerID");

                    b.ToTable("DimCustomers","astonmartin");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CustomerAccount", b =>
                {
                    b.Property<int>("iCustomerAccountID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iCustomerID");

                    b.Property<string>("sAccountType")
                        .HasMaxLength(100);

                    b.Property<string>("sBankName")
                        .HasMaxLength(200);

                    b.Property<string>("sIBANNumber")
                        .HasMaxLength(50);

                    b.Property<string>("sSWIFTCode")
                        .HasMaxLength(20);

                    b.HasKey("iCustomerAccountID");

                    b.HasIndex("iCustomerID");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CustomerDocument", b =>
                {
                    b.Property<int>("iCustomerDocumentKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bDownloaded");

                    b.Property<int>("iCustomerKey");

                    b.Property<int>("iDocumentCategoryKey");

                    b.Property<string>("sDocumentName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sUrl")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("iCustomerDocumentKey");

                    b.HasIndex("iCustomerKey");

                    b.HasIndex("iDocumentCategoryKey");

                    b.ToTable("CustomerDocuments");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CustomerInfo", b =>
                {
                    b.Property<int>("iCustomerKey");

                    b.Property<bool>("bExcludeForProjectBase");

                    b.Property<DateTime>("dtFoundationDate");

                    b.Property<DateTime>("dtInControlDate");

                    b.Property<string>("sBtwNumber")
                        .HasMaxLength(14);

                    b.Property<string>("sCocNumber")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("sEstablishmentNumber")
                        .HasMaxLength(12);

                    b.Property<string>("sSbiCode")
                        .HasMaxLength(250);

                    b.HasKey("iCustomerKey");

                    b.ToTable("CustomerInfo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Debtor", b =>
                {
                    b.Property<int>("iDebtorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InvoicePeriodID");

                    b.Property<bool>("ReceiveNewsletter");

                    b.Property<bool>("bIsBlocked");

                    b.Property<bool>("bIsVacancy");

                    b.Property<bool>("bMailboxAddress");

                    b.Property<bool>("bNoCombinedInvoice");

                    b.Property<bool>("bWaitingForImport");

                    b.Property<DateTime?>("dtDateOfBirth");

                    b.Property<DateTime?>("dtNoInvoicePeriod");

                    b.Property<int>("iDebtorCode");

                    b.Property<int>("iDebtorTypeID");

                    b.Property<int>("iPartnerType");

                    b.Property<int>("iPaymentTermID");

                    b.Property<int>("iShippingProfileID");

                    b.Property<int>("iTitleID");

                    b.Property<string>("sBillingAddress")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sBillingCity")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("sBillingCountry")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("sBillingName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sBillingPostalCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("sCustomerPostingGroup")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("sEmailAddress")
                        .HasMaxLength(80);

                    b.Property<string>("sFirstName")
                        .HasMaxLength(250);

                    b.Property<string>("sIBANNumber")
                        .HasMaxLength(50);

                    b.Property<string>("sInitials")
                        .HasMaxLength(50);

                    b.Property<string>("sInvoiceRemark")
                        .HasMaxLength(50);

                    b.Property<string>("sLastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("sPhoneNumber")
                        .HasMaxLength(30);

                    b.Property<string>("sRemark")
                        .HasMaxLength(250);

                    b.Property<string>("sReminderTermsCode")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("sSWIFTCode")
                        .HasMaxLength(20);

                    b.Property<string>("sVATBusPostingGroup")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("sVATNumber")
                        .HasMaxLength(80);

                    b.HasKey("iDebtorID");

                    b.HasIndex("InvoicePeriodID");

                    b.HasIndex("iDebtorTypeID");

                    b.HasIndex("iPaymentTermID");

                    b.HasIndex("iShippingProfileID");

                    b.HasIndex("iTitleID");

                    b.ToTable("Debtors","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DebtorFile", b =>
                {
                    b.Property<int>("iDebtorFileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("bByteArray")
                        .IsRequired();

                    b.Property<int>("iDebtorID");

                    b.Property<string>("sContentType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sDisplayName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("sFileName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("iDebtorFileID");

                    b.HasIndex("iDebtorID");

                    b.ToTable("DebtorFiles","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DebtorType", b =>
                {
                    b.Property<int>("iDebtorTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("iDebtorTypeID");

                    b.ToTable("DebtorTypes","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Default", b =>
                {
                    b.Property<int>("iDefaultID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Year");

                    b.Property<decimal>("dValue")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("sName")
                        .HasMaxLength(150);

                    b.HasKey("iDefaultID");

                    b.ToTable("Defaults");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Demarcation", b =>
                {
                    b.Property<int>("iDemarcationKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sDemarcation")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iDemarcationKey");

                    b.ToTable("Demarcations");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Deposit", b =>
                {
                    b.Property<int>("iDepositID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bDecreasedByDebtor");

                    b.Property<bool>("bIsActive");

                    b.Property<decimal>("dAmount");

                    b.Property<decimal>("dAmountexVAT")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<DateTime?>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iAddressDebtorID");

                    b.HasKey("iDepositID");

                    b.HasIndex("iAddressDebtorID");

                    b.ToTable("Deposits","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DispensingUnit", b =>
                {
                    b.Property<int>("iDispensingUnitKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sDispensingUnitName")
                        .HasMaxLength(100);

                    b.HasKey("iDispensingUnitKey");

                    b.ToTable("DispensingUnits");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DistributionNetwork", b =>
                {
                    b.Property<int>("iDistributionNetWorkKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sDistributionNetWorkName")
                        .HasMaxLength(25);

                    b.HasKey("iDistributionNetWorkKey");

                    b.ToTable("DistributionNetWorks");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DocumentCategory", b =>
                {
                    b.Property<int>("iDocumentCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iSorting");

                    b.Property<string>("sExplanation")
                        .HasMaxLength(250);

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iDocumentCategoryKey");

                    b.ToTable("DocumentCategories");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DsraDeposit", b =>
                {
                    b.Property<int>("iDsraDepositKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sDsraDepositName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iDsraDepositKey");

                    b.ToTable("DsraDeposits");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.EmailAddress", b =>
                {
                    b.Property<int>("iEmailAddressID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iResponseID");

                    b.Property<string>("sEmailAddress")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iEmailAddressID");

                    b.HasIndex("iResponseID");

                    b.ToTable("EmailAddresses","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.EnergyConcept", b =>
                {
                    b.Property<int>("EnergyConceptID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Order");

                    b.HasKey("EnergyConceptID");

                    b.ToTable("EnergyConcepts");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.EnergyConsumption", b =>
                {
                    b.Property<int>("iEnergyConsumptionKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dCoolingGJ");

                    b.Property<decimal>("dElectricityKwh");

                    b.Property<decimal>("dGasM3");

                    b.Property<decimal>("dHeatingGJ");

                    b.Property<decimal>("dHeatingHotWaterGJ");

                    b.Property<decimal>("dHeatingRoomsGJ");

                    b.Property<decimal>("dOthersT");

                    b.Property<decimal>("dWaterM3");

                    b.Property<Guid>("gGroupKey");

                    b.Property<int>("iPeriod");

                    b.Property<int>("iPeriodKey");

                    b.Property<int>("iProjectKey");

                    b.Property<int>("iQuarter");

                    b.Property<int>("iYear");

                    b.HasKey("iEnergyConsumptionKey");

                    b.HasIndex("iPeriodKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("EnergyConsumption");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.EnergySupplier", b =>
                {
                    b.Property<int>("iEnergySupplierID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sName")
                        .HasMaxLength(100);

                    b.HasKey("iEnergySupplierID");

                    b.ToTable("EnergySuppliers");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Event", b =>
                {
                    b.Property<int>("iEventKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sEventDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iEventKey");

                    b.ToTable("Events","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ExchangeForm", b =>
                {
                    b.Property<int>("iExchangeFormKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileType");

                    b.Property<byte[]>("bContent");

                    b.Property<string>("sContentType")
                        .HasMaxLength(100);

                    b.Property<string>("sFileName")
                        .HasMaxLength(255);

                    b.HasKey("iExchangeFormKey");

                    b.ToTable("ExchangeForms","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.File", b =>
                {
                    b.Property<int>("iFileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("Key");

                    b.Property<int?>("OpportunityID");

                    b.Property<Guid?>("ServiceTicketID");

                    b.Property<Guid?>("WorkOrderID");

                    b.Property<bool>("bAllowSharing");

                    b.Property<byte[]>("bContent");

                    b.Property<int?>("iRateCardYearID");

                    b.Property<string>("sContentType")
                        .HasMaxLength(150);

                    b.Property<string>("sDisplayName")
                        .HasMaxLength(250);

                    b.Property<string>("sOriginalFileName")
                        .HasMaxLength(250);

                    b.Property<string>("sUserID");

                    b.HasKey("iFileID");

                    b.HasIndex("OpportunityID");

                    b.HasIndex("ServiceTicketID");

                    b.HasIndex("WorkOrderID");

                    b.HasIndex("iRateCardYearID");

                    b.ToTable("Files","pms");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Financer", b =>
                {
                    b.Property<int>("iFinancerKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sFinancer")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sLedgerNumberAmortization")
                        .HasMaxLength(50);

                    b.Property<string>("sLedgerNumberInterest")
                        .HasMaxLength(50);

                    b.HasKey("iFinancerKey");

                    b.ToTable("Financers");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.FinancialTransaction", b =>
                {
                    b.Property<int>("iFinancialTransactionKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("dcAmountExVat");

                    b.Property<decimal?>("dcAmountInclVat");

                    b.Property<decimal?>("dcAmountVat");

                    b.Property<int?>("iCostUnitKey");

                    b.Property<int?>("iCountRecord");

                    b.Property<int?>("iCurrencyKey");

                    b.Property<int>("iCustomerID");

                    b.Property<int?>("iDiscount");

                    b.Property<int?>("iEDDateKey");

                    b.Property<int?>("iJournalKey");

                    b.Property<int?>("iLedgerKey");

                    b.Property<int>("iPartnerID");

                    b.Property<int?>("iProjectKey");

                    b.Property<int?>("iRelationKey");

                    b.Property<int>("iSUFKey");

                    b.Property<int?>("iTDDateKey");

                    b.Property<int?>("iUserKey");

                    b.Property<int?>("iVATKey");

                    b.Property<string>("sDesc")
                        .HasMaxLength(255);

                    b.Property<string>("sEntryNumber")
                        .HasMaxLength(20);

                    b.Property<string>("sIncoiceNumber")
                        .HasMaxLength(50);

                    b.Property<string>("sPeriod")
                        .HasMaxLength(10);

                    b.Property<string>("sVATCode")
                        .HasMaxLength(15);

                    b.HasKey("iFinancialTransactionKey");

                    b.ToTable("FactFinancialTransactions","dbo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Financing", b =>
                {
                    b.Property<int>("iFinancingKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bSubordinatedLoan");

                    b.Property<decimal>("dAmount");

                    b.Property<decimal?>("dDsraAmount");

                    b.Property<decimal>("dInterest")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dResdualAmount");

                    b.Property<DateTime>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iDsraDepositKey");

                    b.Property<int>("iFinancerKey");

                    b.Property<int>("iPeriodKey");

                    b.Property<int>("iProjectKey");

                    b.Property<int?>("iSubFinancerKey");

                    b.Property<string>("sDescription")
                        .HasMaxLength(250);

                    b.HasKey("iFinancingKey");

                    b.HasIndex("iDsraDepositKey");

                    b.HasIndex("iFinancerKey");

                    b.HasIndex("iPeriodKey");

                    b.HasIndex("iProjectKey");

                    b.HasIndex("iSubFinancerKey");

                    b.ToTable("Financings");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Frequency", b =>
                {
                    b.Property<int>("iFrequencyKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sFrequencyDescription")
                        .HasMaxLength(25);

                    b.HasKey("iFrequencyKey");

                    b.ToTable("Frequencies","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Hyperlink", b =>
                {
                    b.Property<int>("iHyperlinkKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("VisibleForMechanic");

                    b.Property<bool>("bDownloaded");

                    b.Property<bool>("bVisible");

                    b.Property<int>("iProjectKey");

                    b.Property<string>("sLinkName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sUrl")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("iHyperlinkKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("Hyperlinks");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InstallationPartner", b =>
                {
                    b.Property<int>("InstallationPartnerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("InstallationPartnerID");

                    b.ToTable("InstallationPartners");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InstallationPartnerProcess", b =>
                {
                    b.Property<int>("InstallationPartnerProcessID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("Order");

                    b.HasKey("InstallationPartnerProcessID");

                    b.ToTable("InstallationPartnerProcesses");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Investment", b =>
                {
                    b.Property<int>("iInvestmentKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dAmount");

                    b.Property<decimal>("dResdualAmount");

                    b.Property<DateTime>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iPeriodKey");

                    b.Property<int>("iProjectKey");

                    b.Property<string>("sDescription")
                        .HasMaxLength(250);

                    b.HasKey("iInvestmentKey");

                    b.HasIndex("iPeriodKey");

                    b.HasIndex("iProjectKey");

                    b.ToTable("Investments");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvestmentProposal", b =>
                {
                    b.Property<int>("InvestmentProposalID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.HasKey("InvestmentProposalID");

                    b.ToTable("InvestmentProposals");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Invoice", b =>
                {
                    b.Property<int>("iInvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Note");

                    b.Property<int>("Process");

                    b.Property<string>("ProcessedBy");

                    b.Property<DateTime?>("ProcessedDateTime");

                    b.Property<int?>("StatusID");

                    b.Property<decimal>("dNewDepositAmount");

                    b.Property<decimal>("dNewFixedCosts");

                    b.Property<decimal>("dnewMontlyAmount");

                    b.Property<DateTime>("dtDocumentDate");

                    b.Property<DateTime>("dtPostingDate");

                    b.Property<int>("iAddressID");

                    b.Property<int>("iDebtorID");

                    b.Property<int>("iInvoiceBatchID");

                    b.Property<int>("iPeriod");

                    b.Property<int>("iStatusID");

                    b.Property<int>("iYear");

                    b.Property<string>("sBookingDescription")
                        .HasMaxLength(50);

                    b.Property<string>("sConsumptionAddress")
                        .HasMaxLength(80);

                    b.Property<string>("sExternalDocumentNo")
                        .HasMaxLength(35);

                    b.Property<string>("sPaymentCondition")
                        .HasMaxLength(20);

                    b.Property<string>("sSettlementCode")
                        .HasMaxLength(20);

                    b.Property<string>("sYouReference")
                        .HasMaxLength(35);

                    b.HasKey("iInvoiceID");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("StatusID");

                    b.HasIndex("iAddressID");

                    b.HasIndex("iDebtorID");

                    b.HasIndex("iInvoiceBatchID");

                    b.HasIndex("iStatusID");

                    b.ToTable("Invoices","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceBatch", b =>
                {
                    b.Property<int>("iInvoiceBatchID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InvoicePeriodID");

                    b.Property<DateTime?>("ScheduledDate");

                    b.Property<int?>("StatusID");

                    b.Property<DateTime>("dtDateTime");

                    b.Property<DateTime>("dtInvoiceDateTime");

                    b.Property<int>("iInvoiceTypeID");

                    b.Property<int>("iNumberOfAdresses");

                    b.Property<int>("iPeriod");

                    b.Property<int>("iProjectID");

                    b.Property<int>("iStatusID");

                    b.Property<int>("iYear");

                    b.Property<string>("userID")
                        .IsRequired();

                    b.HasKey("iInvoiceBatchID");

                    b.HasIndex("InvoicePeriodID");

                    b.HasIndex("StatusID");

                    b.HasIndex("iInvoiceTypeID");

                    b.HasIndex("iProjectID");

                    b.HasIndex("iStatusID");

                    b.ToTable("InvoiceBatches","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceCheckOption", b =>
                {
                    b.Property<int>("InvoiceCheckOptionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.HasKey("InvoiceCheckOptionID");

                    b.ToTable("InvoiceCheckOptions","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceLine", b =>
                {
                    b.Property<int>("iInvoiceLineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Discount");

                    b.Property<string>("VatConditionCode")
                        .HasMaxLength(50);

                    b.Property<bool>("bIsEndCalculation");

                    b.Property<decimal>("dAmount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dConsumption")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dEndPosition")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dQuantity")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dStartPosition")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dTotalAmount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dUnitPrice")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<DateTime?>("dtEndDate");

                    b.Property<DateTime?>("dtStartDate");

                    b.Property<int>("iInvoiceID");

                    b.Property<int>("iLedgerNumber");

                    b.Property<int?>("iRateCardRowID");

                    b.Property<int>("iRubricTypeID");

                    b.Property<int>("iUnitID");

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sDescription2")
                        .HasMaxLength(50);

                    b.Property<string>("sSettlementCode")
                        .HasMaxLength(20);

                    b.Property<string>("sSettlementText")
                        .HasMaxLength(30);

                    b.HasKey("iInvoiceLineID");

                    b.HasIndex("iInvoiceID");

                    b.HasIndex("iRateCardRowID");

                    b.HasIndex("iRubricTypeID");

                    b.HasIndex("iUnitID");

                    b.ToTable("InvoiceLines","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoicePeriod", b =>
                {
                    b.Property<int>("InvoicePeriodID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.HasKey("InvoicePeriodID");

                    b.ToTable("InvoicePeriods","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceType", b =>
                {
                    b.Property<int>("iInvoiceTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sInvoiceTypeName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iInvoiceTypeID");

                    b.ToTable("InvoiceTypes","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Label", b =>
                {
                    b.Property<int>("iLabelID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.HasKey("iLabelID");

                    b.ToTable("Labels","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Ledger", b =>
                {
                    b.Property<int>("iLedgerKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("iCustomerID");

                    b.Property<int?>("iPartnerID");

                    b.Property<int?>("iUserKey");

                    b.Property<string>("sAccountCategory")
                        .HasMaxLength(100);

                    b.Property<string>("sAccountCategoryCode")
                        .HasMaxLength(40);

                    b.Property<string>("sLedgerName")
                        .HasMaxLength(60);

                    b.Property<string>("sLedgerNumber")
                        .HasMaxLength(40);

                    b.Property<string>("sLedgerType")
                        .HasMaxLength(20);

                    b.Property<int?>("sReportingCode");

                    b.Property<int?>("sReportingCode_old");

                    b.HasKey("iLedgerKey");

                    b.ToTable("DimLedger","dbo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Log", b =>
                {
                    b.Property<Guid>("LogID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ColumnName");

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<string>("CreatedByUserID")
                        .IsRequired();

                    b.Property<string>("EventType")
                        .IsRequired();

                    b.Property<string>("NewValue");

                    b.Property<string>("OriginalValue");

                    b.Property<string>("RecordID")
                        .IsRequired();

                    b.Property<string>("TableName")
                        .IsRequired();

                    b.HasKey("LogID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.LostToCategory", b =>
                {
                    b.Property<int>("LostToCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.Property<string>("EnglishDescription")
                        .HasMaxLength(128);

                    b.Property<int>("Order");

                    b.HasKey("LostToCategoryID");

                    b.ToTable("LostToCategories");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MailAttachment", b =>
                {
                    b.Property<int>("iMailAttachmentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("bByteArray");

                    b.Property<int>("iResponseID");

                    b.Property<string>("sContentType");

                    b.Property<string>("sFileName");

                    b.HasKey("iMailAttachmentID");

                    b.HasIndex("iResponseID");

                    b.ToTable("MailAttachments","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MailConfig", b =>
                {
                    b.Property<int>("MailConfigID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArchiveFolder");

                    b.Property<bool>("ArchiveMail");

                    b.Property<string>("Description");

                    b.Property<string>("Mailbox");

                    b.Property<string>("Password");

                    b.Property<string>("ReadFolder");

                    b.Property<bool>("ReadMailbox");

                    b.Property<string>("ServiceUrl")
                        .HasMaxLength(250);

                    b.Property<string>("Username");

                    b.HasKey("MailConfigID");

                    b.ToTable("MailConfigs","pms");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MaintenanceContact", b =>
                {
                    b.Property<int>("iMaintenanceContactKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ActiveService");

                    b.Property<string>("GlobalLocationNumber")
                        .HasMaxLength(128);

                    b.Property<int>("MaintenanceContactCommunicationType");

                    b.Property<decimal?>("UnitPriceCallOutHours");

                    b.Property<decimal?>("UnitPriceCallOutKilometers");

                    b.Property<decimal?>("UnitPriceHourlyRate");

                    b.Property<string>("VendorCode")
                        .HasMaxLength(20);

                    b.Property<string>("sContactEmail")
                        .HasMaxLength(50);

                    b.Property<string>("sContactName")
                        .HasMaxLength(50);

                    b.Property<string>("sContactPhone")
                        .HasMaxLength(15);

                    b.Property<string>("sEmail")
                        .HasMaxLength(50);

                    b.Property<string>("sErrorNumber1")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("sErrorNumber2")
                        .HasMaxLength(15);

                    b.Property<string>("sOrganisation")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iMaintenanceContactKey");

                    b.ToTable("MaintenanceContacts");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MaximumPower", b =>
                {
                    b.Property<int>("iMaximumPowerKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dMaximumPower");

                    b.Property<DateTime>("dtEndDateTime");

                    b.Property<DateTime>("dtStartDateTime");

                    b.Property<int>("iAddressKey");

                    b.Property<int>("iCounterKey");

                    b.Property<int>("iServiceRunKey");

                    b.HasKey("iMaximumPowerKey");

                    b.HasIndex("iCounterKey");

                    b.HasIndex("iServiceRunKey");

                    b.ToTable("MaximumPowers","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MeasuringOfficer", b =>
                {
                    b.Property<int>("iMeasuringOfficerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sName")
                        .HasMaxLength(100);

                    b.HasKey("iMeasuringOfficerID");

                    b.ToTable("MeasuringOfficers");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Meter", b =>
                {
                    b.Property<int>("iMeterKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sMeter")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iMeterKey");

                    b.ToTable("Meters");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MeterChangeLog", b =>
                {
                    b.Property<int>("iMeterChangeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dtEffectiveDateTime");

                    b.Property<DateTime>("dtEventCreated");

                    b.Property<int?>("iAddressKeyFrom");

                    b.Property<int?>("iAddressKeyTo");

                    b.Property<int?>("iChangeReasonKey");

                    b.Property<int>("iConsumptionMeterKey");

                    b.Property<int>("iEventKey");

                    b.Property<int?>("iExchangeFormKey");

                    b.Property<string>("sNotes")
                        .HasMaxLength(500);

                    b.Property<string>("sUser")
                        .IsRequired();

                    b.HasKey("iMeterChangeKey");

                    b.HasIndex("iAddressKeyFrom");

                    b.HasIndex("iAddressKeyTo");

                    b.HasIndex("iChangeReasonKey");

                    b.HasIndex("iConsumptionMeterKey");

                    b.HasIndex("iEventKey");

                    b.HasIndex("iExchangeFormKey");

                    b.ToTable("MeterChangeLogs","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MeterType", b =>
                {
                    b.Property<int>("iMeterTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("sPurchaseOrSale")
                        .HasMaxLength(50);

                    b.HasKey("iMeterTypeKey");

                    b.ToTable("MeterTypes","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Month", b =>
                {
                    b.Property<int>("iMonthKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sMonthName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iMonthKey");

                    b.ToTable("Months");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MonthDegreeDayIndex", b =>
                {
                    b.Property<int>("iMonthDegreeDayIndexKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dDegreeDayIndex");

                    b.Property<int>("iBudgetSettingKey");

                    b.Property<int>("iMonthKey");

                    b.HasKey("iMonthDegreeDayIndexKey");

                    b.HasIndex("iBudgetSettingKey");

                    b.HasIndex("iMonthKey");

                    b.ToTable("MonthDegreeDayIndex","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Occupant", b =>
                {
                    b.Property<int>("iOccupantID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CustomerSatisfactionResearch");

                    b.Property<int?>("DebtoriDebtorID");

                    b.Property<Guid?>("OccupantToken");

                    b.Property<bool>("ReceiveNewsletter");

                    b.Property<int?>("TitleiTitleID");

                    b.Property<bool>("bIsVacancy");

                    b.Property<int>("iDebtorID");

                    b.Property<int>("iTitleID");

                    b.Property<string>("sCompanyName")
                        .HasMaxLength(150);

                    b.Property<string>("sEmailAddress")
                        .HasMaxLength(80);

                    b.Property<string>("sFirstName")
                        .HasMaxLength(250);

                    b.Property<string>("sInitials")
                        .HasMaxLength(50);

                    b.Property<string>("sLastName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("sPhoneNumber")
                        .HasMaxLength(30);

                    b.Property<string>("sRemark")
                        .HasMaxLength(250);

                    b.HasKey("iOccupantID");

                    b.HasIndex("DebtoriDebtorID");

                    b.HasIndex("TitleiTitleID");

                    b.HasIndex("iDebtorID");

                    b.HasIndex("iTitleID");

                    b.ToTable("Occupants","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OldCounterStatus", b =>
                {
                    b.Property<int>("iCounterStatusKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bHasError");

                    b.Property<bool>("bHasNoConsumption");

                    b.Property<bool>("bHasNoRateCard");

                    b.Property<bool>("bLastServiceRunHasError");

                    b.Property<DateTime>("dtDateTime");

                    b.Property<int>("iCounterKey");

                    b.Property<string>("sMessage")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("iCounterStatusKey");

                    b.HasIndex("iCounterKey");

                    b.ToTable("CounterStatus","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OldInvoiceStatus", b =>
                {
                    b.Property<int>("iStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Order");

                    b.Property<string>("sStatus")
                        .IsRequired();

                    b.HasKey("iStatusID");

                    b.ToTable("InvoiceStatuses","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Operator", b =>
                {
                    b.Property<int>("iOperatorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sName")
                        .HasMaxLength(100);

                    b.HasKey("iOperatorID");

                    b.ToTable("Operators");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Opportunity", b =>
                {
                    b.Property<int>("iOpportunityID");

                    b.Property<string>("AccountManagerID");

                    b.Property<DateTime>("ActionDate");

                    b.Property<decimal?>("BuildingFinancingPercentage")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("BusinessFloorSurface");

                    b.Property<decimal>("CashFlow");

                    b.Property<decimal>("Chance")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("CommercialAmount");

                    b.Property<decimal>("ConnectionFee");

                    b.Property<int?>("ConstructionTime");

                    b.Property<DateTime?>("ContractDate");

                    b.Property<int?>("ContractDuration");

                    b.Property<decimal>("Costs");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Customer")
                        .HasMaxLength(200);

                    b.Property<string>("DeveloperID");

                    b.Property<decimal>("DevelopmentCosts");

                    b.Property<decimal>("EBITDA");

                    b.Property<DateTime?>("EndOfConstruction");

                    b.Property<int?>("EnergyConceptID");

                    b.Property<decimal>("Equity");

                    b.Property<decimal?>("EquityPercentage")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("ExternalCosts");

                    b.Property<decimal>("ExternalRevenues");

                    b.Property<decimal?>("FinancingPercentage")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("IRRFifteen");

                    b.Property<decimal>("IRRThirty");

                    b.Property<int?>("InstallationPartnerID");

                    b.Property<int?>("InstallationPartnerProcessID");

                    b.Property<decimal>("InstallingPrice");

                    b.Property<int?>("InvestmentProposalID");

                    b.Property<string>("LostTo")
                        .HasMaxLength(200);

                    b.Property<int?>("LostToCategoryID");

                    b.Property<int?>("MaintenanceContactID");

                    b.Property<decimal>("Margin");

                    b.Property<int?>("OpportunityKindID");

                    b.Property<int>("OpportunityStatusID");

                    b.Property<int>("OpportunityTypeID");

                    b.Property<DateTime?>("PlanningApprovalDate");

                    b.Property<decimal>("Portfolio");

                    b.Property<int?>("ProjectInfoID");

                    b.Property<string>("ProjectManagerID");

                    b.Property<decimal>("Purchase");

                    b.Property<decimal>("PurchaseFactor");

                    b.Property<decimal>("PurchasePriceSPV");

                    b.Property<DateTime?>("RequestDate");

                    b.Property<decimal>("ResidenceAmount");

                    b.Property<DateTime?>("StartDateRealisation");

                    b.Property<DateTime?>("StartingDate");

                    b.Property<decimal>("TakenTurnover");

                    b.Property<decimal?>("TakenTurnoverPercentage");

                    b.Property<int?>("TechnicalPrincipalID");

                    b.Property<decimal>("Turnover");

                    b.Property<decimal>("WAEBITDA");

                    b.Property<decimal>("WASPV");

                    b.Property<decimal>("WEQ");

                    b.HasKey("iOpportunityID");

                    b.HasIndex("EnergyConceptID");

                    b.HasIndex("InstallationPartnerID");

                    b.HasIndex("InstallationPartnerProcessID");

                    b.HasIndex("InvestmentProposalID");

                    b.HasIndex("LostToCategoryID");

                    b.HasIndex("MaintenanceContactID");

                    b.HasIndex("OpportunityKindID");

                    b.HasIndex("OpportunityStatusID");

                    b.HasIndex("OpportunityTypeID");

                    b.HasIndex("ProjectInfoID");

                    b.HasIndex("TechnicalPrincipalID");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityDefault", b =>
                {
                    b.Property<int>("iOpportunityDefaultID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dValue")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iOpportunityDefaultID");

                    b.ToTable("OpportunityDefaults");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityKind", b =>
                {
                    b.Property<int>("OpportunityKindID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("OpportunityKindID");

                    b.ToTable("OpportunityKinds");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityNote", b =>
                {
                    b.Property<int>("iOpportunityNoteID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dtCreateDateTime");

                    b.Property<int>("iOpportunityID");

                    b.Property<string>("sNote")
                        .IsRequired();

                    b.Property<string>("sUserID")
                        .IsRequired();

                    b.HasKey("iOpportunityNoteID");

                    b.HasIndex("iOpportunityID");

                    b.ToTable("OpportunityNotes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityStatus", b =>
                {
                    b.Property<int>("OpportunityStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.Property<bool>("ShowInTimeline");

                    b.Property<int>("TimespanFromPreviousStatus");

                    b.Property<int>("TimespanFromRequestDate");

                    b.HasKey("OpportunityStatusID");

                    b.ToTable("OpportunityStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityType", b =>
                {
                    b.Property<int>("OpportunityTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("OpportunityTypeID");

                    b.ToTable("OpportunityTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityValueLog", b =>
                {
                    b.Property<int>("iOpportunityValueLogID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dChance");

                    b.Property<decimal>("dEbitda");

                    b.Property<decimal>("dWAEbitda");

                    b.Property<decimal>("dWAEbitdaMutation");

                    b.Property<DateTime>("dtDateTime");

                    b.Property<int>("iOpportunityID");

                    b.HasKey("iOpportunityValueLogID");

                    b.HasIndex("iOpportunityID");

                    b.ToTable("OpportunityValueLogs");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OtherDelivery", b =>
                {
                    b.Property<int>("iOtherDeliveryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sOtherDelivery")
                        .HasMaxLength(50);

                    b.HasKey("iOtherDeliveryKey");

                    b.ToTable("OtherDeliveries");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OtherDeliveryProjectInfo", b =>
                {
                    b.Property<int>("OtherDeliveryId");

                    b.Property<int>("ProjectInfoId");

                    b.HasKey("OtherDeliveryId", "ProjectInfoId");

                    b.HasIndex("ProjectInfoId");

                    b.ToTable("OtherDeliveryProjectInfo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PaymentHistory", b =>
                {
                    b.Property<int>("iPaymentHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("InvoiceID");

                    b.Property<string>("InvoicePeriod")
                        .HasMaxLength(10);

                    b.Property<decimal>("dAmountinVAT");

                    b.Property<decimal>("dOpenAmountinVAT");

                    b.Property<DateTime>("dtExpirationDate");

                    b.Property<DateTime>("dtInvoiceDate");

                    b.Property<DateTime?>("dtPaymentDate");

                    b.Property<int?>("iAddressID");

                    b.Property<int>("iDebtorID");

                    b.Property<int?>("iInvoiceStatus");

                    b.Property<string>("sDescription")
                        .HasMaxLength(50);

                    b.Property<string>("sInvoiceLink");

                    b.Property<string>("sInvoiceNumber")
                        .HasMaxLength(20);

                    b.Property<string>("sInvoiceStatus")
                        .HasMaxLength(150);

                    b.HasKey("iPaymentHistoryID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("iAddressID");

                    b.HasIndex("iDebtorID");

                    b.ToTable("PaymentHistory","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PaymentTerm", b =>
                {
                    b.Property<int>("iPaymentTermID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("iPaymentTermID");

                    b.ToTable("PaymentTerms","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PaymentTermHistory", b =>
                {
                    b.Property<int>("iPaymentTermHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PaymentTermiPaymentTermID");

                    b.Property<DateTime?>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iDebtorID");

                    b.Property<int>("iPaymentTermID");

                    b.Property<string>("sUserID");

                    b.HasKey("iPaymentTermHistoryID");

                    b.HasIndex("PaymentTermiPaymentTermID");

                    b.HasIndex("iDebtorID");

                    b.HasIndex("iPaymentTermID");

                    b.HasIndex("sUserID");

                    b.ToTable("PaymentTermHistory","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Period", b =>
                {
                    b.Property<int>("iPeriodKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sPeriod")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iPeriodKey");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectBase", b =>
                {
                    b.Property<int>("iProjectKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("dEndDate")
                        .HasMaxLength(50);

                    b.Property<string>("dStartDate")
                        .HasMaxLength(255);

                    b.Property<int>("iCustomerID");

                    b.Property<int>("iPartnerID");

                    b.Property<string>("sProjectCategoryCode")
                        .HasMaxLength(50);

                    b.Property<string>("sProjectCategoryDescription")
                        .HasMaxLength(255);

                    b.Property<string>("sProjectCode")
                        .HasMaxLength(50);

                    b.Property<string>("sProjectDescription")
                        .HasMaxLength(255);

                    b.HasKey("iProjectKey");

                    b.HasIndex("iCustomerID");

                    b.ToTable("DimProject","dbo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfo", b =>
                {
                    b.Property<int>("iProjectKey");

                    b.Property<string>("AssetManagerID");

                    b.Property<int?>("AssetManageriAssetManagerKey");

                    b.Property<bool>("AutomaticInvoicing");

                    b.Property<bool>("AutomaticReport");

                    b.Property<string>("CustomerAnnouncement");

                    b.Property<int?>("DebtCollectionCustomerID");

                    b.Property<bool>("DefaultReferenceDeliveryWater");

                    b.Property<bool>("EMReportRequired");

                    b.Property<bool>("InvoiceViaOwnCollection");

                    b.Property<bool>("InvoicedByDefaultCustomer");

                    b.Property<int?>("MailConfigID");

                    b.Property<string>("MovingMessage")
                        .HasMaxLength(1000);

                    b.Property<decimal>("PercentageDeviationFromAverage")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("ProjectTypeID");

                    b.Property<decimal?>("ReferenceDeliveryWater");

                    b.Property<int?>("ReportValidationSetID");

                    b.Property<string>("ServiceAnnouncement");

                    b.Property<bool>("bAVFQuickscanExecuted");

                    b.Property<bool>("bAirWaterCoolKWhActive");

                    b.Property<bool>("bAirWaterHotKWhActive");

                    b.Property<bool>("bAppliesHeatLaw");

                    b.Property<bool>("bCentralHeatingHotWaterActive");

                    b.Property<bool>("bCentralHeatingRoomsActive");

                    b.Property<bool>("bCentralHeatingRoomsForWater");

                    b.Property<bool>("bChillerActive");

                    b.Property<bool>("bCooling");

                    b.Property<bool>("bDefaultCOPRoomHeating");

                    b.Property<bool>("bDefaultCOPWaterHeating");

                    b.Property<bool>("bDefaultCoolLimit");

                    b.Property<bool>("bDefaultEnergyDemandRoomHeating");

                    b.Property<bool>("bDefaultEnergyDemandWaterHeating");

                    b.Property<bool>("bDefaultReferenceSalesCooling");

                    b.Property<bool>("bDefaultSPFbes");

                    b.Property<bool>("bDefaultStokeLimit");

                    b.Property<bool>("bDeliverCoolWater");

                    b.Property<bool>("bDrinkWater");

                    b.Property<bool>("bDryCoolerActive");

                    b.Property<bool>("bEnergyRoofActive");

                    b.Property<bool>("bExternalAccess");

                    b.Property<bool>("bGasBoilerActive");

                    b.Property<bool>("bHeatPumpsActive");

                    b.Property<bool>("bHotWater");

                    b.Property<bool>("bNumberOfSolarCollectorsElectricActive");

                    b.Property<bool>("bPerpetualClause");

                    b.Property<bool>("bQualitativeObligation");

                    b.Property<bool>("bReferenProjectDoesNotApply");

                    b.Property<bool>("bRentalCase");

                    b.Property<bool>("bShelterLaw");

                    b.Property<bool>("bSolarCollectorsElectricKWhActive");

                    b.Property<bool>("bSolarCollectorsThermallyActive");

                    b.Property<bool>("bSourcePowerCoolKWhActive");

                    b.Property<bool>("bSourcePowerCoolM3Active");

                    b.Property<bool>("bSourcePowerHotKWhActive");

                    b.Property<bool>("bSourcePowerHotM3Active");

                    b.Property<bool>("bSurfaceGenerationKWhActive");

                    b.Property<bool>("bSurfaceGenerationM3Active");

                    b.Property<bool>("bWIONRegistration");

                    b.Property<bool>("bWasteHeatActive");

                    b.Property<bool>("bWoodPelletStoveActive");

                    b.Property<decimal?>("dAirWaterCoolKWh");

                    b.Property<decimal?>("dAirWaterHotKWh");

                    b.Property<decimal?>("dCOPRoomHeating");

                    b.Property<decimal?>("dCOPWaterHeating");

                    b.Property<decimal?>("dCentralHeatingHotWater");

                    b.Property<decimal?>("dCentralHeatingRooms");

                    b.Property<decimal?>("dChiller");

                    b.Property<decimal?>("dCoolLimit");

                    b.Property<decimal?>("dDiscountRate")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("dDistribution");

                    b.Property<decimal?>("dDryCooler");

                    b.Property<decimal?>("dEnergyDemandRoomHeating");

                    b.Property<decimal?>("dEnergyDemandWater");

                    b.Property<decimal?>("dEnergyRoof");

                    b.Property<decimal?>("dGasBoiler");

                    b.Property<decimal?>("dHeatPumps");

                    b.Property<decimal?>("dLatitude")
                        .HasColumnType("decimal(9, 7)");

                    b.Property<decimal?>("dLongitude")
                        .HasColumnType("decimal(10, 7)");

                    b.Property<decimal?>("dNumberOfSolarCollectorsElectric");

                    b.Property<decimal?>("dReferenceDeliverCooling");

                    b.Property<decimal?>("dReinstatementInstallation");

                    b.Property<decimal?>("dResponseTimeCallBack");

                    b.Property<decimal?>("dResponseTimeOnSite");

                    b.Property<decimal?>("dResponseTimeSolution");

                    b.Property<decimal?>("dSPFbes");

                    b.Property<decimal?>("dSolarCollectorsElectricKWh");

                    b.Property<decimal?>("dSolarCollectorsThermally");

                    b.Property<decimal?>("dSourcePowerCoolKWh");

                    b.Property<decimal?>("dSourcePowerCoolM3");

                    b.Property<decimal?>("dSourcePowerHotKWh");

                    b.Property<decimal?>("dSourcePowerHotM3");

                    b.Property<decimal?>("dSpecialCharges");

                    b.Property<decimal?>("dStokeLimit");

                    b.Property<decimal?>("dSurfaceGenerationKWh");

                    b.Property<decimal?>("dSurfaceGenerationM3");

                    b.Property<decimal?>("dTemperatureHotWater");

                    b.Property<decimal>("dUpDownsides");

                    b.Property<decimal?>("dWasteHeat");

                    b.Property<decimal?>("dWoodPelletStove");

                    b.Property<DateTime?>("dtDateReinvestment");

                    b.Property<DateTime?>("dtDateTakeOver");

                    b.Property<DateTime?>("dtEndDateExploitation");

                    b.Property<DateTime?>("dtLastAVFQuickScan");

                    b.Property<DateTime?>("dtStartDateExploitation");

                    b.Property<DateTime?>("dtStartDateTechnicalExploitation");

                    b.Property<int?>("iAssetManagerKey");

                    b.Property<int?>("iCalculationTypePurchaseID");

                    b.Property<int?>("iCalculationTypeSalesID");

                    b.Property<int?>("iColdTemperatureRangeKey");

                    b.Property<int?>("iDefaultDebtorID");

                    b.Property<int?>("iDemarcationKey");

                    b.Property<int?>("iDistributionNetWorkKey");

                    b.Property<int?>("iFinProjectKey");

                    b.Property<int?>("iHomeMaintenanceContactKey");

                    b.Property<int?>("iMaintenanceContactKey");

                    b.Property<int?>("iMeterKey");

                    b.Property<string>("iNumber")
                        .HasMaxLength(50);

                    b.Property<int?>("iProjectReportPeriod");

                    b.Property<int>("iProjectStatusID");

                    b.Property<int?>("iReferenceProjectKey");

                    b.Property<int?>("iSupplyWaterTypeKey");

                    b.Property<int?>("iTechnicalPrincipalMainKey");

                    b.Property<int?>("iTechnicalPrincipalSub1Key");

                    b.Property<int?>("iTechnicalPrincipalSub2Key");

                    b.Property<int?>("iTemperatureRangeKey");

                    b.Property<int?>("iTransactionModeID");

                    b.Property<int?>("iWaterTypeKey");

                    b.Property<int?>("iYearCentralInstallation");

                    b.Property<string>("sCity")
                        .HasMaxLength(150);

                    b.Property<string>("sCustomerName")
                        .HasMaxLength(150);

                    b.Property<string>("sEnergyManagerID");

                    b.Property<string>("sLicenseWaterLaw")
                        .HasMaxLength(100);

                    b.Property<string>("sPostalcodeArea")
                        .HasMaxLength(100);

                    b.Property<string>("sProjectAlias")
                        .HasMaxLength(500);

                    b.Property<string>("sProjectImage")
                        .HasMaxLength(255);

                    b.Property<string>("sPurchaseInstruction");

                    b.Property<string>("sSalesInstruction");

                    b.Property<string>("sSlaDocument")
                        .HasMaxLength(2000);

                    b.Property<string>("sStreetName")
                        .HasMaxLength(100);

                    b.Property<string>("sUpDownsides")
                        .HasMaxLength(250);

                    b.HasKey("iProjectKey");

                    b.HasIndex("AssetManagerID");

                    b.HasIndex("AssetManageriAssetManagerKey");

                    b.HasIndex("DebtCollectionCustomerID");

                    b.HasIndex("MailConfigID");

                    b.HasIndex("ProjectTypeID");

                    b.HasIndex("ReportValidationSetID");

                    b.HasIndex("iCalculationTypePurchaseID");

                    b.HasIndex("iCalculationTypeSalesID");

                    b.HasIndex("iColdTemperatureRangeKey");

                    b.HasIndex("iDefaultDebtorID");

                    b.HasIndex("iDemarcationKey");

                    b.HasIndex("iDistributionNetWorkKey");

                    b.HasIndex("iHomeMaintenanceContactKey");

                    b.HasIndex("iMaintenanceContactKey");

                    b.HasIndex("iMeterKey");

                    b.HasIndex("iProjectStatusID");

                    b.HasIndex("iReferenceProjectKey");

                    b.HasIndex("iSupplyWaterTypeKey");

                    b.HasIndex("iTechnicalPrincipalMainKey");

                    b.HasIndex("iTechnicalPrincipalSub1Key");

                    b.HasIndex("iTechnicalPrincipalSub2Key");

                    b.HasIndex("iTemperatureRangeKey");

                    b.HasIndex("iTransactionModeID");

                    b.HasIndex("iWaterTypeKey");

                    b.HasIndex("sEnergyManagerID");

                    b.ToTable("ProjectInfo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfoPurchDeliveryType", b =>
                {
                    b.Property<int>("PurchaseDeliveryTypeId");

                    b.Property<int>("ProjectInfoPurchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ProjectInfoiProjectKey");

                    b.HasKey("PurchaseDeliveryTypeId", "ProjectInfoPurchId");

                    b.HasIndex("ProjectInfoiProjectKey");

                    b.ToTable("ProjectInfoPurchDeliveryType");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfoSalesDeliveryType", b =>
                {
                    b.Property<int>("SalesDeliveryTypeId");

                    b.Property<int>("ProjectInfoId");

                    b.HasKey("SalesDeliveryTypeId", "ProjectInfoId");

                    b.HasIndex("ProjectInfoId");

                    b.ToTable("ProjectInfoSalesDeliveryType");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfoUserGroup", b =>
                {
                    b.Property<int>("UserGroupId");

                    b.Property<int>("ProjectInfoId");

                    b.HasKey("UserGroupId", "ProjectInfoId");

                    b.HasIndex("ProjectInfoId");

                    b.ToTable("ProjectInfoUserGroup");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectReportValidationSetLog", b =>
                {
                    b.Property<int>("ProjectReportValidationSetLogID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeByUserID");

                    b.Property<DateTime?>("ChangeDateTime");

                    b.Property<string>("CreateByUserID")
                        .IsRequired();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("ProjectID");

                    b.Property<int>("ReportValidationSetID");

                    b.Property<int?>("ReportValidationSetID1");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ProjectReportValidationSetLogID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ReportValidationSetID");

                    b.HasIndex("ReportValidationSetID1");

                    b.ToTable("ProjectReportValidationSetLogs");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectStatus", b =>
                {
                    b.Property<int>("iProjectStatusID");

                    b.Property<string>("sStatusDescription")
                        .HasMaxLength(150);

                    b.HasKey("iProjectStatusID");

                    b.ToTable("ProjectStatuses");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectType", b =>
                {
                    b.Property<int>("ProjectTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.HasKey("ProjectTypeID");

                    b.ToTable("ProjectType");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PurchaseDeliveryType", b =>
                {
                    b.Property<int>("iPurchaseDeliveryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDescription")
                        .HasMaxLength(50);

                    b.HasKey("iPurchaseDeliveryTypeID");

                    b.ToTable("PurchaseDeliveryTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCard", b =>
                {
                    b.Property<int>("iRateCardKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("iRateCardTypeKey");

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iRateCardKey");

                    b.HasIndex("iRateCardTypeKey");

                    b.ToTable("RateCards","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardRow", b =>
                {
                    b.Property<int>("iRateCardRowKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Discount");

                    b.Property<int?>("VatConditionID");

                    b.Property<bool>("bIndexed");

                    b.Property<decimal>("dAmount")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dVAT")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int?>("iCounterTypeKey");

                    b.Property<int?>("iRateCardScaleRowKey");

                    b.Property<int>("iRateCardYearKey");

                    b.Property<int>("iRubricKey");

                    b.Property<int>("iUnitKey");

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iRateCardRowKey");

                    b.HasIndex("VatConditionID");

                    b.HasIndex("iCounterTypeKey");

                    b.HasIndex("iRateCardScaleRowKey");

                    b.HasIndex("iRateCardYearKey");

                    b.HasIndex("iRubricKey");

                    b.HasIndex("iUnitKey");

                    b.ToTable("RateCardRows","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardScale", b =>
                {
                    b.Property<int>("iRateCardScaleKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iUnitKey");

                    b.Property<string>("sRateCardScaleDescription")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iRateCardScaleKey");

                    b.HasIndex("iUnitKey");

                    b.ToTable("RateCardScales","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardScaleHistory", b =>
                {
                    b.Property<int>("RateCardScaleHistoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressID");

                    b.Property<decimal>("Consumed")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("DebtorID");

                    b.Property<DateTime>("Period");

                    b.Property<int>("RateCardRowID");

                    b.HasKey("RateCardScaleHistoryID");

                    b.HasIndex("AddressID");

                    b.HasIndex("DebtorID");

                    b.HasIndex("RateCardRowID");

                    b.ToTable("RateCardScaleHistories","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardScaleRow", b =>
                {
                    b.Property<int>("iRateCardScaleRowKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iRateCardScaleKey");

                    b.Property<int?>("iRowEnd");

                    b.Property<int>("iRowStart");

                    b.Property<string>("sDescription")
                        .HasMaxLength(150);

                    b.HasKey("iRateCardScaleRowKey");

                    b.HasIndex("iRateCardScaleKey");

                    b.ToTable("RateCardScaleRows","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardType", b =>
                {
                    b.Property<int>("iRateCardTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iRateCardTypeKey");

                    b.ToTable("RateCardTypes","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardYear", b =>
                {
                    b.Property<int>("iRateCardYearKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("iRateCardKey");

                    b.Property<int>("iYear");

                    b.HasKey("iRateCardYearKey");

                    b.HasIndex("iRateCardKey");

                    b.ToTable("RateCardYears","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReferenceProject", b =>
                {
                    b.Property<int>("iReferenceProjectKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sReferenProjectName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iReferenceProjectKey");

                    b.ToTable("ReferenceProjects");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReferenceProjectRow", b =>
                {
                    b.Property<int>("iReferenceProjectRowKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dDistributionEfficiency")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal>("dGenerationEfficiency")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("iCounterTypeKey");

                    b.Property<int>("iReferenceProjectKey");

                    b.Property<string>("sConnectionTypeKey")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("iReferenceProjectRowKey");

                    b.HasIndex("iCounterTypeKey");

                    b.HasIndex("iReferenceProjectKey");

                    b.HasIndex("sConnectionTypeKey");

                    b.ToTable("ReferenceProjectRows");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Report", b =>
                {
                    b.Property<int>("iReportKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AutomaticReport");

                    b.Property<bool>("ReportOnBudget");

                    b.Property<int?>("ReportValidationSetID");

                    b.Property<bool>("bBooked");

                    b.Property<bool>("bConcept");

                    b.Property<DateTime>("dtDateTimeCreated");

                    b.Property<DateTime>("dtDateTimeLastEdited");

                    b.Property<int>("iProjectKey");

                    b.Property<int>("iReportPeriodKey");

                    b.Property<string>("sCreatedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("sLastEditedBy")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("sReportNote")
                        .HasMaxLength(500);

                    b.Property<string>("sValidationNote")
                        .HasMaxLength(500);

                    b.HasKey("iReportKey");

                    b.HasIndex("ReportValidationSetID");

                    b.HasIndex("iProjectKey");

                    b.HasIndex("iReportPeriodKey");

                    b.ToTable("Reports","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportColumn", b =>
                {
                    b.Property<int>("iReportColumnKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sReportingColumnName")
                        .HasMaxLength(50);

                    b.HasKey("iReportColumnKey");

                    b.ToTable("ReportColumns");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportPeriod", b =>
                {
                    b.Property<int>("iReportPeriodKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bBlocked");

                    b.Property<DateTime>("dtPeriodDate");

                    b.Property<int>("iPeriod");

                    b.Property<int>("iYear");

                    b.HasKey("iReportPeriodKey");

                    b.ToTable("ReportPeriods","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportRow", b =>
                {
                    b.Property<int>("iReportRowKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CalculationTypeID");

                    b.Property<decimal>("dBudgetAmount");

                    b.Property<decimal>("dCumBudgetAmount");

                    b.Property<decimal>("dCumCalculateAmount");

                    b.Property<decimal>("dCumReportAmount");

                    b.Property<decimal>("dMutationAmount");

                    b.Property<decimal>("dOriginalAmount");

                    b.Property<int>("iReportKey");

                    b.Property<int>("iRubricKey");

                    b.HasKey("iReportRowKey");

                    b.HasIndex("CalculationTypeID");

                    b.HasIndex("iReportKey");

                    b.HasIndex("iRubricKey");

                    b.ToTable("ReportRows","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportValidation", b =>
                {
                    b.Property<int>("iReportValidationKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iReportKey");

                    b.Property<int?>("iStatusCode");

                    b.Property<string>("sValidationMessage")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("iReportValidationKey");

                    b.HasIndex("iReportKey");

                    b.ToTable("ReportValidations","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportValidationSet", b =>
                {
                    b.Property<int>("ReportValidationSetID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ChangeByUserID");

                    b.Property<DateTime?>("ChangeDateTime");

                    b.Property<string>("CreateByUserID")
                        .IsRequired();

                    b.Property<DateTime>("CreateDateTime");

                    b.Property<bool>("MasterSet");

                    b.Property<string>("ReportValidationSetName")
                        .HasMaxLength(150);

                    b.HasKey("ReportValidationSetID");

                    b.HasIndex("ChangeByUserID");

                    b.HasIndex("CreateByUserID");

                    b.ToTable("ReportValidationSets");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportValidationSetLine", b =>
                {
                    b.Property<int>("ReportValidationSetLineID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FormatString")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ReportValidationSetID");

                    b.Property<string>("ReportValidationSetLineName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int?>("RubricID");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("ValueOperatorID");

                    b.HasKey("ReportValidationSetLineID");

                    b.HasIndex("ReportValidationSetID");

                    b.HasIndex("RubricID");

                    b.HasIndex("ValueOperatorID");

                    b.ToTable("ReportValidationSetLines");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportingStructure", b =>
                {
                    b.Property<int>("iReportingStructureKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Bedrijfsresultaat");

                    b.Property<int?>("Berekenen");

                    b.Property<int?>("CurRat_Activa");

                    b.Property<int?>("CurRat_Passiva");

                    b.Property<int?>("EigenVermogen");

                    b.Property<int?>("Factor");

                    b.Property<int?>("IsDirect");

                    b.Property<int?>("KortlSchuldenVorderingen");

                    b.Property<int?>("Kosten");

                    b.Property<int?>("KostenTotaal");

                    b.Property<int?>("KostprijsOmzet");

                    b.Property<int?>("Leningen");

                    b.Property<int?>("Marge");

                    b.Property<string>("Niveau")
                        .HasMaxLength(50);

                    b.Property<int?>("Omzet");

                    b.Property<int?>("PercTonen");

                    b.Property<int?>("Personeelskosten");

                    b.Property<int?>("RS_IsStand");

                    b.Property<int?>("RS_JaarTerug");

                    b.Property<int?>("RS_VordSchuld");

                    b.Property<int?>("RcEnd");

                    b.Property<int?>("RcStart");

                    b.Property<int?>("RecNo");

                    b.Property<int?>("TotaalVermogen");

                    b.Property<int?>("VastVariabel");

                    b.Property<int?>("bk_Splitsing");

                    b.Property<int?>("iBalResKey");

                    b.Property<int?>("iCalculation");

                    b.Property<int?>("iProjectrapportagType");

                    b.Property<int?>("isFlipCode");

                    b.Property<string>("sCalculation")
                        .HasMaxLength(50);

                    b.Property<string>("sDescription")
                        .HasMaxLength(255);

                    b.Property<string>("sOpmaak")
                        .HasMaxLength(50);

                    b.Property<string>("sSpatie")
                        .HasMaxLength(50);

                    b.Property<int?>("wk_Belastingen");

                    b.Property<int?>("wk_Crediteuren");

                    b.Property<int?>("wk_Debiteuren");

                    b.Property<int?>("wk_LiquideMiddelen");

                    b.HasKey("iReportingStructureKey");

                    b.ToTable("ReportingStructure","donkervoort");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Response", b =>
                {
                    b.Property<int>("iResponseID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BCCList");

                    b.Property<bool>("bIncoming");

                    b.Property<DateTime>("dtCreateDateTime");

                    b.Property<int>("iResponseTypeID");

                    b.Property<int>("iTicketID");

                    b.Property<string>("sFromEmail")
                        .HasMaxLength(150);

                    b.Property<string>("sFromName")
                        .HasMaxLength(150);

                    b.Property<string>("sMessage")
                        .IsRequired();

                    b.Property<string>("sToEmail")
                        .HasMaxLength(150);

                    b.Property<string>("sToName")
                        .HasMaxLength(150);

                    b.Property<string>("sUserID");

                    b.HasKey("iResponseID");

                    b.HasIndex("iResponseTypeID");

                    b.HasIndex("iTicketID");

                    b.ToTable("Responses","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ResponseConcept", b =>
                {
                    b.Property<int>("iTicketID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BCCList");

                    b.Property<string>("CCList");

                    b.Property<bool>("MailHistory");

                    b.Property<bool>("NoteHistory");

                    b.Property<bool>("PhoneHistory");

                    b.Property<bool>("PortalHistory");

                    b.Property<bool>("SolutionHistory");

                    b.Property<DateTime>("dtDateTimeLastEdited");

                    b.Property<int>("iResponseTypeID");

                    b.Property<int>("iTicketStatusID");

                    b.Property<string>("sMessage");

                    b.Property<string>("sSolution");

                    b.Property<string>("sToEmail")
                        .HasMaxLength(150);

                    b.Property<string>("sUserID");

                    b.HasKey("iTicketID");

                    b.HasIndex("iResponseTypeID");

                    b.HasIndex("iTicketStatusID");

                    b.ToTable("ResponseConcepts","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ResponseText", b =>
                {
                    b.Property<int>("iResponseTextID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("iTicketTypeID");

                    b.Property<string>("sMessage")
                        .IsRequired();

                    b.Property<string>("sTitle")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iResponseTextID");

                    b.HasIndex("iTicketTypeID");

                    b.ToTable("ResponseTexts","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ResponseType", b =>
                {
                    b.Property<int>("iResponseTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDisplayName")
                        .HasMaxLength(50);

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iResponseTypeID");

                    b.ToTable("ResponseTypes","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Resultaatoverzicht", b =>
                {
                    b.Property<int?>("iCustomerID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Berekenen");

                    b.Property<int>("RecNo");

                    b.Property<decimal?>("SaldoBudget");

                    b.Property<decimal?>("SaldoRealisatie");

                    b.Property<int?>("VastVariabel");

                    b.Property<int?>("iPeriod");

                    b.Property<int?>("iProjectKey");

                    b.Property<int?>("iSubTotal");

                    b.Property<int?>("iYear");

                    b.Property<string>("sDescription");

                    b.Property<string>("sOpmaak");

                    b.Property<string>("sSpatie");

                    b.HasKey("iCustomerID");

                    b.ToTable("Resultaatoverzicht","dbo");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Results.ApplicationRoleGroup", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.Property<string>("ApplicationRoleId");

                    b.Property<int?>("RoleGroupId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("ApplicationRoleId");

                    b.HasIndex("RoleGroupId");

                    b.ToTable("ApplicationRoleGroup");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RoleGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AspNetRoleGroups");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Rubric", b =>
                {
                    b.Property<int>("iRubricKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bTotal");

                    b.Property<int?>("iAccountNumber")
                        .IsRequired();

                    b.Property<int?>("iCounterAccountNumber")
                        .IsRequired();

                    b.Property<int>("iReportingCode");

                    b.Property<int>("iRowNo");

                    b.Property<int>("iRowNoEnd");

                    b.Property<int>("iRowNoStart");

                    b.Property<int>("iRubricGroupKey");

                    b.Property<int?>("iRubricTypeKey");

                    b.Property<string>("sRubricDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iRubricKey");

                    b.HasIndex("iRubricGroupKey");

                    b.HasIndex("iRubricTypeKey");

                    b.ToTable("Rubrics","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RubricGroup", b =>
                {
                    b.Property<int>("iRubricGroupKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sRubricGroupDescription")
                        .HasMaxLength(50);

                    b.HasKey("iRubricGroupKey");

                    b.ToTable("RubricGroups","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RubricType", b =>
                {
                    b.Property<int>("iRubricTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sRubricTypeDescription")
                        .HasMaxLength(50);

                    b.HasKey("iRubricTypeKey");

                    b.ToTable("RubricTypes","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.SalesDeliveryType", b =>
                {
                    b.Property<int>("iSalesDeliveryTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sDescription")
                        .HasMaxLength(50);

                    b.HasKey("iSalesDeliveryTypeID");

                    b.ToTable("SalesDeliveryTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Service", b =>
                {
                    b.Property<int>("iServiceKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dtNextServiceRun");

                    b.Property<string>("sServiceName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("sServiceType")
                        .HasMaxLength(100);

                    b.HasKey("iServiceKey");

                    b.ToTable("Services","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoice", b =>
                {
                    b.Property<Guid>("ServiceInvoiceID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(250);

                    b.Property<int>("MaintenanceContactID");

                    b.Property<DateTime?>("PostedDateTime");

                    b.Property<int?>("ProjectID");

                    b.Property<int>("ServiceInvoiceCode");

                    b.Property<int>("StatusID");

                    b.HasKey("ServiceInvoiceID");

                    b.HasIndex("MaintenanceContactID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("StatusID");

                    b.ToTable("ServiceInvoices","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoiceLine", b =>
                {
                    b.Property<Guid>("ServiceInvoiceLineID");

                    b.Property<Guid?>("AssetManagerInputID");

                    b.Property<Guid?>("CoordinatorInputID");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("FinishedDateTime");

                    b.Property<int>("MaintenanceContactID");

                    b.Property<Guid?>("MaintenanceContactInputID");

                    b.Property<Guid?>("OwnerInputID");

                    b.Property<string>("RejectByID");

                    b.Property<string>("RejectComment")
                        .HasMaxLength(1000);

                    b.Property<bool>("Rejected");

                    b.Property<Guid?>("ServiceInvoiceID");

                    b.Property<int>("StatusID");

                    b.HasKey("ServiceInvoiceLineID");

                    b.HasIndex("AssetManagerInputID");

                    b.HasIndex("CoordinatorInputID");

                    b.HasIndex("MaintenanceContactID");

                    b.HasIndex("MaintenanceContactInputID");

                    b.HasIndex("OwnerInputID");

                    b.HasIndex("RejectByID");

                    b.HasIndex("ServiceInvoiceID");

                    b.HasIndex("StatusID");

                    b.ToTable("ServiceInvoiceLines","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoiceLineInput", b =>
                {
                    b.Property<Guid>("ServiceInvoiceLineInputID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("CallOutHours");

                    b.Property<decimal?>("CallOutKilometers");

                    b.Property<decimal?>("MaterialCost");

                    b.Property<string>("Note")
                        .HasMaxLength(1000);

                    b.Property<decimal>("TotalCosts");

                    b.Property<string>("UserID");

                    b.Property<DateTime>("ValidatedDate");

                    b.Property<decimal?>("WorkingHours");

                    b.Property<decimal?>("WorkingHours100");

                    b.Property<decimal?>("WorkingHours25");

                    b.Property<decimal?>("WorkingHours50");

                    b.HasKey("ServiceInvoiceLineInputID");

                    b.HasIndex("UserID");

                    b.ToTable("ServiceInvoiceLineInputs","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceMessage", b =>
                {
                    b.Property<Guid>("ServiceMessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body")
                        .IsRequired();

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("FromDisplayName")
                        .HasMaxLength(250);

                    b.Property<bool>("IsInternalNote");

                    b.Property<bool>("OutGoing");

                    b.Property<Guid>("ServiceTicketID");

                    b.Property<string>("UserID");

                    b.HasKey("ServiceMessageID");

                    b.HasIndex("ServiceTicketID");

                    b.ToTable("ServiceMessages","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceRun", b =>
                {
                    b.Property<int>("iServiceRunKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bInQueue");

                    b.Property<DateTime?>("dtServiceRunEndDate");

                    b.Property<DateTime>("dtServiceRunStartDate");

                    b.Property<int?>("iNumberOfReprocessed");

                    b.Property<int>("iServiceKey");

                    b.Property<int>("iServiceRunRowsUpdated");

                    b.Property<int>("iServiceRunStatus");

                    b.Property<string>("sFileName")
                        .HasMaxLength(250);

                    b.Property<string>("sServiceRunMessage")
                        .HasMaxLength(1000);

                    b.HasKey("iServiceRunKey");

                    b.HasIndex("iServiceKey");

                    b.ToTable("ServiceRuns","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceRunError", b =>
                {
                    b.Property<int>("iServiceRunErrorKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("dtEffectiveDateTime");

                    b.Property<int>("iServiceRunKey");

                    b.Property<int>("iStatusCode");

                    b.Property<string>("sConsumptionMeterNumber")
                        .HasMaxLength(100);

                    b.Property<string>("sErrorMessage")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<string>("sProjectNumber")
                        .HasMaxLength(100);

                    b.HasKey("iServiceRunErrorKey");

                    b.HasIndex("iServiceRunKey");

                    b.ToTable("ServiceRunErrors","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceTicket", b =>
                {
                    b.Property<Guid>("ServiceTicketID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AddressID");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<int?>("DebtorID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<decimal?>("ExpectedAmount");

                    b.Property<DateTime?>("FinishedDateTime");

                    b.Property<int?>("MaintenanceContactID");

                    b.Property<bool>("MaintenanceContactInformed");

                    b.Property<int?>("OccupantID");

                    b.Property<int>("ProjectID");

                    b.Property<int?>("ServiceTicketTypeID");

                    b.Property<int>("StatusID");

                    b.Property<int>("TicketCode");

                    b.Property<int?>("TicketiTicketID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<bool>("Urgent");

                    b.Property<string>("UserID");

                    b.HasKey("ServiceTicketID");

                    b.HasIndex("AddressID");

                    b.HasIndex("DebtorID");

                    b.HasIndex("MaintenanceContactID");

                    b.HasIndex("OccupantID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("ServiceTicketTypeID");

                    b.HasIndex("StatusID");

                    b.HasIndex("TicketiTicketID")
                        .IsUnique()
                        .HasFilter("[TicketiTicketID] IS NOT NULL");

                    b.HasIndex("UserID");

                    b.ToTable("ServiceTickets","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceTicketType", b =>
                {
                    b.Property<int>("ServiceTicketTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("ServiceTicketTypeID");

                    b.ToTable("ServiceTicketTypes","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ShippingProfile", b =>
                {
                    b.Property<int>("iShippingProfileID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("iShippingProfileID");

                    b.ToTable("ShippingProfiles","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.SolutionCategory", b =>
                {
                    b.Property<int>("SolutionCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.HasKey("SolutionCategoryID");

                    b.ToTable("SolutionCategories","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(128);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("StatusCode");

                    b.Property<string>("StatusColor")
                        .HasMaxLength(50);

                    b.HasKey("StatusID");

                    b.ToTable("Statuses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Status");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Subsidy", b =>
                {
                    b.Property<int>("iSubsidyKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dAmount");

                    b.Property<DateTime>("dtEndDate");

                    b.Property<DateTime>("dtStartDate");

                    b.Property<int>("iProjectKey");

                    b.Property<int>("iSubsidyCategoryKey");

                    b.Property<string>("sSubsidyDescription")
                        .HasMaxLength(250);

                    b.HasKey("iSubsidyKey");

                    b.HasIndex("iProjectKey");

                    b.HasIndex("iSubsidyCategoryKey");

                    b.ToTable("Subsidies");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.SubsidyCategory", b =>
                {
                    b.Property<int>("iSubsidyCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sSubsidyCategory")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iSubsidyCategoryKey");

                    b.ToTable("SubsidyCategories");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.SupplyWaterType", b =>
                {
                    b.Property<int>("iSupplyWaterTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sSupplyWaterType")
                        .HasMaxLength(50);

                    b.HasKey("iSupplyWaterTypeKey");

                    b.ToTable("SupplyWaterTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TechnicalPrincipal", b =>
                {
                    b.Property<int>("iTechnicalPrincipalKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnglishDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<bool>("bActive");

                    b.Property<bool>("bIsGas");

                    b.Property<string>("sTechnicalPrincipal")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("iTechnicalPrincipalKey");

                    b.ToTable("TechnicalPrincipals");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TemperatureRange", b =>
                {
                    b.Property<int>("iTemperatureRangeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sHeatOrCold")
                        .HasMaxLength(1);

                    b.Property<string>("sTemperatureRange")
                        .HasMaxLength(100);

                    b.HasKey("iTemperatureRangeKey");

                    b.ToTable("TemperatureRanges");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Ticket", b =>
                {
                    b.Property<int>("iTicketID");

                    b.Property<int?>("MailConfigID");

                    b.Property<bool>("Suppressed");

                    b.Property<DateTime?>("SuppressedUntil");

                    b.Property<bool>("bAssigned");

                    b.Property<bool>("bFinished");

                    b.Property<DateTime>("dtCreateDateTime");

                    b.Property<DateTime?>("dtFinishedDateTime");

                    b.Property<int?>("iAddressID");

                    b.Property<int?>("iDebtorID");

                    b.Property<int?>("iOccupantID");

                    b.Property<int?>("iProjectID");

                    b.Property<int>("iTicketStatusID");

                    b.Property<int>("iTicketTypeID");

                    b.Property<string>("sEmail")
                        .HasMaxLength(100);

                    b.Property<string>("sMessage")
                        .IsRequired();

                    b.Property<string>("sPhoneNumber")
                        .HasMaxLength(30);

                    b.Property<string>("sSolution");

                    b.Property<string>("sTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("sUserID");

                    b.HasKey("iTicketID");

                    b.HasIndex("MailConfigID");

                    b.HasIndex("iAddressID");

                    b.HasIndex("iDebtorID");

                    b.HasIndex("iOccupantID");

                    b.HasIndex("iProjectID");

                    b.HasIndex("iTicketStatusID");

                    b.HasIndex("iTicketTypeID");

                    b.HasIndex("sUserID");

                    b.ToTable("Tickets","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TicketLabel", b =>
                {
                    b.Property<int>("TicketId");

                    b.Property<int>("LabelId");

                    b.HasKey("TicketId", "LabelId");

                    b.HasIndex("LabelId");

                    b.ToTable("TicketLabel");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TicketLog", b =>
                {
                    b.Property<int>("iTicketLogID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("dtTimestamp");

                    b.Property<int>("iTicketID");

                    b.Property<string>("sActivity")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("sUserID");

                    b.HasKey("iTicketLogID");

                    b.HasIndex("iTicketID");

                    b.HasIndex("sUserID");

                    b.ToTable("TicketLogs","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TicketStatus", b =>
                {
                    b.Property<int>("iTicketStatusID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iTicketStatusID");

                    b.ToTable("TicketStatuses","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TicketType", b =>
                {
                    b.Property<int>("iTicketTypeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("iTicketTypeID");

                    b.ToTable("TicketTypes","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Title", b =>
                {
                    b.Property<int>("iTitleID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sTitleName")
                        .HasMaxLength(50);

                    b.HasKey("iTitleID");

                    b.ToTable("Titles","invoice");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TransactionMode", b =>
                {
                    b.Property<int>("iTransactionModeID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("sCodeBusiness")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("sCodeNonIncasso")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("sCodePerson")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("sDescription")
                        .HasMaxLength(80);

                    b.HasKey("iTransactionModeID");

                    b.ToTable("TransactionModes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Unit", b =>
                {
                    b.Property<int>("iUnitKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<bool>("bUsedForCounter");

                    b.Property<int>("iOrder");

                    b.Property<string>("sDescription")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("sUnit")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("iUnitKey");

                    b.ToTable("Units","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("AspNetUserGroups");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ValueOperator", b =>
                {
                    b.Property<int>("ValueOperatorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ValueOperatorID");

                    b.ToTable("ValueOperators");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.VatCondition", b =>
                {
                    b.Property<int>("VatConditionID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("VatConditionID");

                    b.ToTable("VatConditions","meter");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WaterType", b =>
                {
                    b.Property<int>("iWaterTypeKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sWaterType")
                        .HasMaxLength(100);

                    b.HasKey("iWaterTypeKey");

                    b.ToTable("WaterTypes");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WeqCategory", b =>
                {
                    b.Property<int>("iWeqCategoryKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("bActive");

                    b.Property<string>("sWeqCategory")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("iWeqCategoryKey");

                    b.ToTable("WeqCategories");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WeqMutation", b =>
                {
                    b.Property<int>("iWeqMutationKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("dBusinessFloorDone");

                    b.Property<decimal?>("dBusinessFloorToBeRealised");

                    b.Property<DateTime>("dDate");

                    b.Property<decimal?>("dUseSurface");

                    b.Property<int?>("iConnections");

                    b.Property<int?>("iConnectionsToBeRealised");

                    b.Property<int?>("iDispensingUnitKey");

                    b.Property<int>("iDone");

                    b.Property<int>("iProjectKey");

                    b.Property<int>("iToBeRealised");

                    b.Property<int>("iWeqCategoryKey");

                    b.HasKey("iWeqMutationKey");

                    b.HasIndex("iDispensingUnitKey");

                    b.HasIndex("iProjectKey");

                    b.HasIndex("iWeqCategoryKey");

                    b.ToTable("WeqMutations");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WorkOrder", b =>
                {
                    b.Property<Guid>("WorkOrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ChargeCustomer");

                    b.Property<DateTime>("CreatedDateTime");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(250);

                    b.Property<bool>("FallsWithinContract");

                    b.Property<DateTime?>("FinishedDateTime");

                    b.Property<string>("Instruction")
                        .HasMaxLength(1000);

                    b.Property<string>("InternalComment")
                        .HasMaxLength(1000);

                    b.Property<Guid?>("MechanicInputID");

                    b.Property<string>("MechanicName")
                        .HasMaxLength(250);

                    b.Property<string>("MechanicSignature");

                    b.Property<string>("OccupantName")
                        .HasMaxLength(250);

                    b.Property<string>("OccupantSignature");

                    b.Property<DateTime?>("PlannedDateTime");

                    b.Property<bool>("RequestComment");

                    b.Property<Guid>("ServiceTicketID");

                    b.Property<int?>("SolutionCategoryID");

                    b.Property<string>("SolutionDescription")
                        .HasMaxLength(1000);

                    b.Property<int>("StatusID");

                    b.Property<bool>("Urgent");

                    b.Property<int>("WorkOrderCode");

                    b.HasKey("WorkOrderID");

                    b.HasIndex("MechanicInputID");

                    b.HasIndex("ServiceTicketID");

                    b.HasIndex("SolutionCategoryID");

                    b.HasIndex("StatusID");

                    b.ToTable("WorkOrders","service");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.YearDegreeDayIndex", b =>
                {
                    b.Property<int>("iYearDegreeIndexKey")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("dDegreeDayIndex");

                    b.Property<int>("iBudgetSettingKey");

                    b.Property<int>("iYear");

                    b.HasKey("iYearDegreeIndexKey");

                    b.HasIndex("iBudgetSettingKey");

                    b.ToTable("YearDegreeDayIndex","budget");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetReference", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<int>("Code");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<int>("Order");

                    b.ToTable("BudgetReferences","budget");

                    b.HasDiscriminator().HasValue("BudgetReference");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterTypeYearSeasonPattern", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<int>("CounterTypeId");

                    b.Property<Guid>("ProjectYearDetailId");

                    b.Property<Guid>("SeasonalPatternId");

                    b.HasIndex("CounterTypeId");

                    b.HasIndex("ProjectYearDetailId");

                    b.HasIndex("SeasonalPatternId");

                    b.ToTable("CounterTypeYearSeasonPatterns");

                    b.HasDiscriminator().HasValue("CounterTypeYearSeasonPattern");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.NoInvoicePeriods", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<DateTime>("BlockedPeriod");

                    b.Property<int>("DebtorId");

                    b.HasIndex("DebtorId");

                    b.ToTable("NoInvoicePeriods","invoice");

                    b.HasDiscriminator().HasValue("NoInvoicePeriods");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PeriodPercentage", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("PeriodNumber");

                    b.Property<Guid>("SeasonalPatternId")
                        .HasColumnName("PeriodPercentage_SeasonalPatternId");

                    b.HasIndex("SeasonalPatternId");

                    b.ToTable("PeriodPercentages");

                    b.HasDiscriminator().HasValue("PeriodPercentage");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectYearDetail", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<int>("ProjectId");

                    b.Property<int>("Year");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectYearDetails");

                    b.HasDiscriminator().HasValue("ProjectYearDetail");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.SeasonalPattern", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<bool>("Calculated");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<int>("PatternType");

                    b.Property<decimal>("PercentFootHold")
                        .HasColumnType("decimal(18, 5)");

                    b.ToTable("SeasonalPatterns");

                    b.HasDiscriminator().HasValue("SeasonalPattern");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WebserviceConnection", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.BaseModel");

                    b.Property<string>("BaseUrl")
                        .HasMaxLength(512);

                    b.Property<string>("Domain")
                        .HasMaxLength(256);

                    b.Property<int>("MaintenanceContactCommunicationType");

                    b.Property<int>("MaintenanceContactID");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasIndex("MaintenanceContactID");

                    b.HasDiscriminator().HasValue("WebserviceConnection");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("CounterStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceBatchStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("InvoiceBatchStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("InvoiceStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoiceLineStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("ServiceInvoiceLineStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoiceStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("ServiceInvoiceStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceTicketStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("ServiceTicketStatus");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WorkOrderStatus", b =>
                {
                    b.HasBaseType("PmsEteck.Data.Models.Status");

                    b.ToTable("Statuses");

                    b.HasDiscriminator().HasValue("WorkOrderStatus");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.InvoiceCheck", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.InvoiceCheckOption", "InvoiceCheckOption")
                        .WithMany("InvoiceChecks")
                        .HasForeignKey("InvoiceCheckOptionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Invoice", "Invoice")
                        .WithMany("InvoiceChecks")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Address", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "CollectiveAddress")
                        .WithMany()
                        .HasForeignKey("CollectiveAddressID");

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("Addresses")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey");

                    b.HasOne("PmsEteck.Data.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("sConnectionTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AddressDebtor", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BillingType", "BillingType")
                        .WithMany()
                        .HasForeignKey("BillingTypeID");

                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("AddressDebtors")
                        .HasForeignKey("iAddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("AddressDebtors")
                        .HasForeignKey("iDebtorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AddressOccupant", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("AddressOccupants")
                        .HasForeignKey("iAddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Occupant", "Occupant")
                        .WithMany("AddressOccupants")
                        .HasForeignKey("iOccupantID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AddressRateCard", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("AddressRateCards")
                        .HasForeignKey("iAddressKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.RateCard", "RateCard")
                        .WithMany("AddressRateCards")
                        .HasForeignKey("iRateCardKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany()
                        .HasForeignKey("MaintenanceContactID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationUserGroup", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserGroups")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("PmsEteck.Data.Models.UserGroup", "UserGroup")
                        .WithMany("Users")
                        .HasForeignKey("UserGroupId");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ApplicationUserRoleGroup", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.RoleGroup", "RoleGroup")
                        .WithMany("Users")
                        .HasForeignKey("RoleGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("RoleGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.AverageMonthConsumption", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CounterType", "CounterType")
                        .WithMany()
                        .HasForeignKey("CounterTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("AverageMonthConsumptions")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BlindConsumption", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("iAddressKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany("BlindConsumption")
                        .HasForeignKey("iCounterKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Budget", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetDimension", "BudgetDimension")
                        .WithMany("Budgets")
                        .HasForeignKey("iBudgetDimensionKey");

                    b.HasOne("PmsEteck.Data.Models.ProjectBase", "ProjectBase")
                        .WithMany("Budgets")
                        .HasForeignKey("iProjectKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetBase", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetBaseType", "BudgetType")
                        .WithMany()
                        .HasForeignKey("iBudgetBaseTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("iCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetDimension", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetReference", "BudgetReference")
                        .WithMany()
                        .HasForeignKey("BudgetReferenceId");

                    b.HasOne("PmsEteck.Data.Models.BudgetBase", "BudgetBase")
                        .WithMany("BudgetDimensions")
                        .HasForeignKey("iBudgetBaseKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.BudgetDimensionType", "BudgetDimensionType")
                        .WithMany()
                        .HasForeignKey("iBudgetDimensionTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.BudgetSetting", "BudgetSetting")
                        .WithMany()
                        .HasForeignKey("iBudgetSettingKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectBase", "ProjectBase")
                        .WithMany("BudgetDimensions")
                        .HasForeignKey("iProjectKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetDimensionRule", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetDimension", "BudgetDimension")
                        .WithMany("BudgetDimensionRules")
                        .HasForeignKey("iBudgetDimensionKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ReportingStructure", "ReportingStructure")
                        .WithMany()
                        .HasForeignKey("iReportingStructureKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BudgetSectionIndex", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetSetting", "BudgetSetting")
                        .WithMany("BudgetSectionIndex")
                        .HasForeignKey("iBudgetSettingKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ReportingStructure", "ReportingStructure")
                        .WithMany()
                        .HasForeignKey("iReportingStructureKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.BuildingManagementSystem", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CommunicationType", "CommunicationType")
                        .WithMany()
                        .HasForeignKey("CommunicationTypeID");

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("BuildingManagementSystems")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CO2ConstantRow", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CO2Constant", "CO2Constant")
                        .WithMany("CO2ConstantRows")
                        .HasForeignKey("iCO2ConstantKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CalcMutation", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CalcCategory", "CalcCategory")
                        .WithMany()
                        .HasForeignKey("iCalcCategoryKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("CalcMutations")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CalcRule", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithOne("CalcRule")
                        .HasForeignKey("PmsEteck.Data.Models.CalcRule", "iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Consumption", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("Consumption")
                        .HasForeignKey("iAddressKey");

                    b.HasOne("PmsEteck.Data.Models.ConsumptionUnvalidated", "ConsumptionUnvalidated")
                        .WithMany()
                        .HasForeignKey("iConsumptionUnvalidatedID");

                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany("Consumption")
                        .HasForeignKey("iCounterKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ConsumptionMeter", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("ConsumptionMeters")
                        .HasForeignKey("iAddressKey");

                    b.HasOne("PmsEteck.Data.Models.ConsumptionMeterSupplier", "Supplier")
                        .WithMany("ConsumptionMeters")
                        .HasForeignKey("iConsumptionMeterSupplierKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.EnergySupplier", "EnergySupplier")
                        .WithMany("ConsumptionMeters")
                        .HasForeignKey("iEnergySupplierID");

                    b.HasOne("PmsEteck.Data.Models.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("iFrequencyKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.MeasuringOfficer", "MeasuringOfficer")
                        .WithMany()
                        .HasForeignKey("iMeasuringOfficerID");

                    b.HasOne("PmsEteck.Data.Models.MeterType", "MeterType")
                        .WithMany("ConsumptionMeters")
                        .HasForeignKey("iMeterTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Operator", "Operator")
                        .WithMany()
                        .HasForeignKey("iOperatorID");

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ConsumptionUnvalidated", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("iAddressKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany()
                        .HasForeignKey("iCounterKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Contact", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("iContactTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("Contacts")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CostlierValue", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("CostlierValues")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Counter", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CounterStatus", "CounterStatus")
                        .WithMany("Counters")
                        .HasForeignKey("StatusID");

                    b.HasOne("PmsEteck.Data.Models.ConsumptionMeter", "ConsumptionMeter")
                        .WithMany("Counters")
                        .HasForeignKey("iConsumptionMeterKey");

                    b.HasOne("PmsEteck.Data.Models.CounterType", "CounterType")
                        .WithMany("Counters")
                        .HasForeignKey("iCounterTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey");

                    b.HasOne("PmsEteck.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("iUnitKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterChangeLog", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ConsumptionMeter", "FromConsumptionMeter")
                        .WithMany()
                        .HasForeignKey("iConsumptionMeterKeyFrom");

                    b.HasOne("PmsEteck.Data.Models.ConsumptionMeter", "ToConsumptionMeter")
                        .WithMany()
                        .HasForeignKey("iConsumptionMeterKeyTo");

                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany("ChangeLogs")
                        .HasForeignKey("iCounterKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("iEventKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ExchangeForm", "ExchangeForm")
                        .WithMany()
                        .HasForeignKey("iExchangeFormKey");

                    b.HasOne("PmsEteck.Data.Models.MeterChangeLog", "MeterChange")
                        .WithMany()
                        .HasForeignKey("iMeterChangeKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterYearConsumption", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany("CounterYearConsumptions")
                        .HasForeignKey("CounterID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CustomerAccount", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CustomerInfo", "CustomerInfo")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("iCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CustomerDocument", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CustomerInfo", "Customer")
                        .WithMany("Documents")
                        .HasForeignKey("iCustomerKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.DocumentCategory", "DocumentCategory")
                        .WithMany("CustomerDocuments")
                        .HasForeignKey("iDocumentCategoryKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CustomerInfo", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Customer", "CustomerBase")
                        .WithOne("CustomerInfo")
                        .HasForeignKey("PmsEteck.Data.Models.CustomerInfo", "iCustomerKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Debtor", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.InvoicePeriod", "InvoicePeriod")
                        .WithMany("Debtors")
                        .HasForeignKey("InvoicePeriodID");

                    b.HasOne("PmsEteck.Data.Models.DebtorType", "DebtorType")
                        .WithMany()
                        .HasForeignKey("iDebtorTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.PaymentTerm", "PaymentTerm")
                        .WithMany("Debtors")
                        .HasForeignKey("iPaymentTermID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ShippingProfile", "ShippingProfile")
                        .WithMany()
                        .HasForeignKey("iShippingProfileID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("iTitleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.DebtorFile", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("DebtorFiles")
                        .HasForeignKey("iDebtorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Deposit", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.AddressDebtor", "AddressDebtor")
                        .WithMany("Deposits")
                        .HasForeignKey("iAddressDebtorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.EmailAddress", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Response", "Response")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("iResponseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.EnergyConsumption", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Period", "Period")
                        .WithMany()
                        .HasForeignKey("iPeriodKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo")
                        .WithMany("EnergyConsumption")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.File", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Opportunity", "Opportunity")
                        .WithMany("Documents")
                        .HasForeignKey("OpportunityID");

                    b.HasOne("PmsEteck.Data.Models.ServiceTicket", "ServiceTicket")
                        .WithMany("Documents")
                        .HasForeignKey("ServiceTicketID");

                    b.HasOne("PmsEteck.Data.Models.WorkOrder", "WorkOrder")
                        .WithMany("Files")
                        .HasForeignKey("WorkOrderID");

                    b.HasOne("PmsEteck.Data.Models.RateCardYear", "RateCardYear")
                        .WithMany("Files")
                        .HasForeignKey("iRateCardYearID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Financing", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.DsraDeposit", "DsraDeposit")
                        .WithMany()
                        .HasForeignKey("iDsraDepositKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Financer", "Financer")
                        .WithMany()
                        .HasForeignKey("iFinancerKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Period", "Period")
                        .WithMany()
                        .HasForeignKey("iPeriodKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("Financings")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Financer", "SubFinancer")
                        .WithMany()
                        .HasForeignKey("iSubFinancerKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Hyperlink", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("Hyperlinks")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Investment", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Period", "Period")
                        .WithMany()
                        .HasForeignKey("iPeriodKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo")
                        .WithMany("Investments")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Invoice", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "Validator")
                        .WithMany("Invoices")
                        .HasForeignKey("ProcessedBy");

                    b.HasOne("PmsEteck.Data.Models.InvoiceStatus", "InvoiceStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("StatusID");

                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("iAddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("Invoices")
                        .HasForeignKey("iDebtorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.InvoiceBatch", "InvoiceBatch")
                        .WithMany("Invoices")
                        .HasForeignKey("iInvoiceBatchID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.OldInvoiceStatus", "OldStatus")
                        .WithMany("Invoices")
                        .HasForeignKey("iStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceBatch", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.InvoicePeriod", "InvoicePeriod")
                        .WithMany()
                        .HasForeignKey("InvoicePeriodID");

                    b.HasOne("PmsEteck.Data.Models.InvoiceBatchStatus", "InvoiceBatchStatus")
                        .WithMany("InvoiceBatches")
                        .HasForeignKey("StatusID");

                    b.HasOne("PmsEteck.Data.Models.InvoiceType", "InvoiceType")
                        .WithMany()
                        .HasForeignKey("iInvoiceTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany()
                        .HasForeignKey("iProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.OldInvoiceStatus", "Status")
                        .WithMany("InvoiceBatches")
                        .HasForeignKey("iStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.InvoiceLine", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("iInvoiceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.RateCardRow", "RateCardRow")
                        .WithMany()
                        .HasForeignKey("iRateCardRowID");

                    b.HasOne("PmsEteck.Data.Models.RubricType", "RubricType")
                        .WithMany()
                        .HasForeignKey("iRubricTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("iUnitID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MailAttachment", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Response", "Response")
                        .WithMany("Attachments")
                        .HasForeignKey("iResponseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MaximumPower", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany("MaximumPowers")
                        .HasForeignKey("iCounterKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany()
                        .HasForeignKey("iServiceRunKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MeterChangeLog", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "FromAddress")
                        .WithMany()
                        .HasForeignKey("iAddressKeyFrom");

                    b.HasOne("PmsEteck.Data.Models.Address", "ToAddress")
                        .WithMany()
                        .HasForeignKey("iAddressKeyTo");

                    b.HasOne("PmsEteck.Data.Models.ChangeReason", "ChangeReason")
                        .WithMany()
                        .HasForeignKey("iChangeReasonKey");

                    b.HasOne("PmsEteck.Data.Models.ConsumptionMeter", "ConsumptionMeter")
                        .WithMany("MeterChangeLogs")
                        .HasForeignKey("iConsumptionMeterKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("iEventKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ExchangeForm", "ExchangeForm")
                        .WithMany()
                        .HasForeignKey("iExchangeFormKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.MonthDegreeDayIndex", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetSetting", "BudgetSetting")
                        .WithMany("MonthDegreeDayIndex")
                        .HasForeignKey("iBudgetSettingKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Month", "Month")
                        .WithMany()
                        .HasForeignKey("iMonthKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Occupant", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Debtor")
                        .WithMany("Occupants")
                        .HasForeignKey("DebtoriDebtorID");

                    b.HasOne("PmsEteck.Data.Models.Title")
                        .WithMany("Occupants")
                        .HasForeignKey("TitleiTitleID");

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany()
                        .HasForeignKey("iDebtorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PmsEteck.Data.Models.Title", "Title")
                        .WithMany()
                        .HasForeignKey("iTitleID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OldCounterStatus", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Counter", "Counter")
                        .WithMany("OldCounterStatus")
                        .HasForeignKey("iCounterKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Opportunity", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.EnergyConcept", "EnergyConcept")
                        .WithMany("Opportunities")
                        .HasForeignKey("EnergyConceptID");

                    b.HasOne("PmsEteck.Data.Models.InstallationPartner", "InstallationPartner")
                        .WithMany("Opportunities")
                        .HasForeignKey("InstallationPartnerID");

                    b.HasOne("PmsEteck.Data.Models.InstallationPartnerProcess", "InstallationPartnerProcess")
                        .WithMany("Opportunities")
                        .HasForeignKey("InstallationPartnerProcessID");

                    b.HasOne("PmsEteck.Data.Models.InvestmentProposal", "InvestmentProposal")
                        .WithMany("Opportunities")
                        .HasForeignKey("InvestmentProposalID");

                    b.HasOne("PmsEteck.Data.Models.LostToCategory", "LostToCategory")
                        .WithMany()
                        .HasForeignKey("LostToCategoryID");

                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany("Opportunities")
                        .HasForeignKey("MaintenanceContactID");

                    b.HasOne("PmsEteck.Data.Models.OpportunityKind", "OpportunityKind")
                        .WithMany("Opportunities")
                        .HasForeignKey("OpportunityKindID");

                    b.HasOne("PmsEteck.Data.Models.OpportunityStatus", "OpportunityStatus")
                        .WithMany("Opportunities")
                        .HasForeignKey("OpportunityStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.OpportunityType", "OpportunityType")
                        .WithMany("Opportunities")
                        .HasForeignKey("OpportunityTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany()
                        .HasForeignKey("ProjectInfoID");

                    b.HasOne("PmsEteck.Data.Models.TechnicalPrincipal", "TechnicalPrincipal")
                        .WithMany("Opportunities")
                        .HasForeignKey("TechnicalPrincipalID");

                    b.HasOne("PmsEteck.Data.Models.ProjectBase", "ProjectBase")
                        .WithOne("Opportunity")
                        .HasForeignKey("PmsEteck.Data.Models.Opportunity", "iOpportunityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityNote", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Opportunity", "Opportunity")
                        .WithMany("OpportunityNotes")
                        .HasForeignKey("iOpportunityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OpportunityValueLog", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Opportunity", "Opportunity")
                        .WithMany("OpportunityValueLogs")
                        .HasForeignKey("iOpportunityID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.OtherDeliveryProjectInfo", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.OtherDelivery", "OtherDelivery")
                        .WithMany("Projects")
                        .HasForeignKey("OtherDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("OtherDeliveries")
                        .HasForeignKey("ProjectInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PaymentHistory", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceID");

                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("iAddressID");

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("PaymentHistory")
                        .HasForeignKey("iDebtorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PaymentTermHistory", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.PaymentTerm")
                        .WithMany("PaymentTermHistories")
                        .HasForeignKey("PaymentTermiPaymentTermID");

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("PaymentTermHistories")
                        .HasForeignKey("iDebtorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.PaymentTerm", "PaymentTerm")
                        .WithMany()
                        .HasForeignKey("iPaymentTermID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "User")
                        .WithMany("PaymentTermHistories")
                        .HasForeignKey("sUserID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectBase", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("iCustomerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfo", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("AssetManagerID");

                    b.HasOne("PmsEteck.Data.Models.AssetManager", "AssetManager")
                        .WithMany()
                        .HasForeignKey("AssetManageriAssetManagerKey");

                    b.HasOne("PmsEteck.Data.Models.Customer", "DebtCollectionCustomer")
                        .WithMany()
                        .HasForeignKey("DebtCollectionCustomerID");

                    b.HasOne("PmsEteck.Data.Models.MailConfig", "MailConfig")
                        .WithMany("Projects")
                        .HasForeignKey("MailConfigID");

                    b.HasOne("PmsEteck.Data.Models.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeID");

                    b.HasOne("PmsEteck.Data.Models.ReportValidationSet", "ReportValidationSet")
                        .WithMany("Projects")
                        .HasForeignKey("ReportValidationSetID");

                    b.HasOne("PmsEteck.Data.Models.CalculationType", "CalculationTypePurchase")
                        .WithMany()
                        .HasForeignKey("iCalculationTypePurchaseID");

                    b.HasOne("PmsEteck.Data.Models.CalculationType", "CalculationTypeSales")
                        .WithMany()
                        .HasForeignKey("iCalculationTypeSalesID");

                    b.HasOne("PmsEteck.Data.Models.TemperatureRange", "ColdTemperatureRange")
                        .WithMany()
                        .HasForeignKey("iColdTemperatureRangeKey");

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany()
                        .HasForeignKey("iDefaultDebtorID");

                    b.HasOne("PmsEteck.Data.Models.Demarcation", "Demarcation")
                        .WithMany()
                        .HasForeignKey("iDemarcationKey");

                    b.HasOne("PmsEteck.Data.Models.DistributionNetwork", "DistributionNetwork")
                        .WithMany()
                        .HasForeignKey("iDistributionNetWorkKey");

                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "HomeMaintenanceContact")
                        .WithMany()
                        .HasForeignKey("iHomeMaintenanceContactKey");

                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany("Projects")
                        .HasForeignKey("iMaintenanceContactKey");

                    b.HasOne("PmsEteck.Data.Models.Meter", "Meter")
                        .WithMany()
                        .HasForeignKey("iMeterKey");

                    b.HasOne("PmsEteck.Data.Models.ProjectBase", "ProjectBase")
                        .WithOne("ProjectInfo")
                        .HasForeignKey("PmsEteck.Data.Models.ProjectInfo", "iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("iProjectStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ReferenceProject", "ReferenceProject")
                        .WithMany()
                        .HasForeignKey("iReferenceProjectKey");

                    b.HasOne("PmsEteck.Data.Models.SupplyWaterType", "SupplyWaterType")
                        .WithMany()
                        .HasForeignKey("iSupplyWaterTypeKey");

                    b.HasOne("PmsEteck.Data.Models.TechnicalPrincipal", "TechnicalPrincipalMain")
                        .WithMany()
                        .HasForeignKey("iTechnicalPrincipalMainKey");

                    b.HasOne("PmsEteck.Data.Models.TechnicalPrincipal", "TechnicalPrincipalSub1")
                        .WithMany()
                        .HasForeignKey("iTechnicalPrincipalSub1Key");

                    b.HasOne("PmsEteck.Data.Models.TechnicalPrincipal", "TechnicalPrincipalSub2")
                        .WithMany()
                        .HasForeignKey("iTechnicalPrincipalSub2Key");

                    b.HasOne("PmsEteck.Data.Models.TemperatureRange", "HeatTemperatureRange")
                        .WithMany()
                        .HasForeignKey("iTemperatureRangeKey");

                    b.HasOne("PmsEteck.Data.Models.TransactionMode", "TransactionMode")
                        .WithMany()
                        .HasForeignKey("iTransactionModeID");

                    b.HasOne("PmsEteck.Data.Models.WaterType", "WaterType")
                        .WithMany()
                        .HasForeignKey("iWaterTypeKey");

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "EnergyManager")
                        .WithMany()
                        .HasForeignKey("sEnergyManagerID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfoPurchDeliveryType", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("PurchaseTypes")
                        .HasForeignKey("ProjectInfoiProjectKey");

                    b.HasOne("PmsEteck.Data.Models.PurchaseDeliveryType", "PurchaseDeliveryType")
                        .WithMany("Projects")
                        .HasForeignKey("PurchaseDeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfoSalesDeliveryType", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("SalesTypes")
                        .HasForeignKey("ProjectInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.SalesDeliveryType", "SalesDeliveryType")
                        .WithMany("Projects")
                        .HasForeignKey("SalesDeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectInfoUserGroup", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("UserGroups")
                        .HasForeignKey("ProjectInfoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.UserGroup", "UserGroup")
                        .WithMany("Projects")
                        .HasForeignKey("UserGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectReportValidationSetLog", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("ReportValidationSetLog")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ReportValidationSet", "ReportValidationSet")
                        .WithMany()
                        .HasForeignKey("ReportValidationSetID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PmsEteck.Data.Models.ReportValidationSet")
                        .WithMany("ProjectLog")
                        .HasForeignKey("ReportValidationSetID1");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCard", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.RateCardType", "RateCardType")
                        .WithMany()
                        .HasForeignKey("iRateCardTypeKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardRow", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.VatCondition", "VatCondition")
                        .WithMany()
                        .HasForeignKey("VatConditionID");

                    b.HasOne("PmsEteck.Data.Models.CounterType", "CounterType")
                        .WithMany()
                        .HasForeignKey("iCounterTypeKey");

                    b.HasOne("PmsEteck.Data.Models.RateCardScaleRow", "RateCardScaleRow")
                        .WithMany("RateCardRows")
                        .HasForeignKey("iRateCardScaleRowKey");

                    b.HasOne("PmsEteck.Data.Models.RateCardYear", "RateCardYear")
                        .WithMany("RateCardRows")
                        .HasForeignKey("iRateCardYearKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Rubric", "Rubric")
                        .WithMany("RateCardRows")
                        .HasForeignKey("iRubricKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("iUnitKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardScale", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("iUnitKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardScaleHistory", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("RateCardScaleHistories")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("RateCardScaleHistories")
                        .HasForeignKey("DebtorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.RateCardRow", "RateCardRow")
                        .WithMany("RateCardScaleHistories")
                        .HasForeignKey("RateCardRowID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardScaleRow", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.RateCardScale", "RateCardScale")
                        .WithMany("RateCardScaleRows")
                        .HasForeignKey("iRateCardScaleKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.RateCardYear", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.RateCard", "RateCard")
                        .WithMany("RateCardYears")
                        .HasForeignKey("iRateCardKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReferenceProjectRow", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CounterType", "CounterType")
                        .WithMany()
                        .HasForeignKey("iCounterTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ReferenceProject", "ReferenceProject")
                        .WithMany("ReferenceProjectRows")
                        .HasForeignKey("iReferenceProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ConnectionType", "ConnectionType")
                        .WithMany()
                        .HasForeignKey("sConnectionTypeKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Report", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ReportValidationSet", "ReportValidationSet")
                        .WithMany("Reports")
                        .HasForeignKey("ReportValidationSetID");

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("Reports")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ReportPeriod", "ReportPeriod")
                        .WithMany("Reports")
                        .HasForeignKey("iReportPeriodKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportRow", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CalculationType", "CalculationType")
                        .WithMany()
                        .HasForeignKey("CalculationTypeID");

                    b.HasOne("PmsEteck.Data.Models.Report", "Report")
                        .WithMany("ReportRows")
                        .HasForeignKey("iReportKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Rubric", "Rubric")
                        .WithMany()
                        .HasForeignKey("iRubricKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportValidation", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Report", "Report")
                        .WithMany("ReportValidations")
                        .HasForeignKey("iReportKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportValidationSet", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "ChangeByUser")
                        .WithMany()
                        .HasForeignKey("ChangeByUserID");

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "CreateByUser")
                        .WithMany()
                        .HasForeignKey("CreateByUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ReportValidationSetLine", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ReportValidationSet", "ReportValidationSet")
                        .WithMany("ReportValidationSetLines")
                        .HasForeignKey("ReportValidationSetID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Rubric", "Rubric")
                        .WithMany()
                        .HasForeignKey("RubricID");

                    b.HasOne("PmsEteck.Data.Models.ValueOperator", "ValueOperator")
                        .WithMany()
                        .HasForeignKey("ValueOperatorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Response", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ResponseType", "ResponseType")
                        .WithMany("Responses")
                        .HasForeignKey("iResponseTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Ticket", "Ticket")
                        .WithMany("Responses")
                        .HasForeignKey("iTicketID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ResponseConcept", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ResponseType", "ResponseType")
                        .WithMany()
                        .HasForeignKey("iResponseTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.TicketStatus", "TicketStatus")
                        .WithMany("ResponseConcepts")
                        .HasForeignKey("iTicketStatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ResponseText", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.TicketType", "TicketType")
                        .WithMany("ResponseTexts")
                        .HasForeignKey("iTicketTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Results.ApplicationRoleGroup", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("RoleGroups")
                        .HasForeignKey("ApplicationRoleId");

                    b.HasOne("PmsEteck.Data.Models.RoleGroup", "RoleGroup")
                        .WithMany("Roles")
                        .HasForeignKey("RoleGroupId");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Rubric", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.RubricGroup", "RubricGroup")
                        .WithMany()
                        .HasForeignKey("iRubricGroupKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.RubricType", "RubricType")
                        .WithMany()
                        .HasForeignKey("iRubricTypeKey");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoice", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany("ServiceInvoices")
                        .HasForeignKey("MaintenanceContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("ServiceInvoices")
                        .HasForeignKey("ProjectID");

                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceStatus", "Status")
                        .WithMany("ServiceInvoices")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoiceLine", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceLineInput", "AssetManagerInput")
                        .WithMany("AssetmanagerInputLines")
                        .HasForeignKey("AssetManagerInputID");

                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceLineInput", "CoordinatorInput")
                        .WithMany("CoordinatorInputLines")
                        .HasForeignKey("CoordinatorInputID");

                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany("ServiceInvoiceLines")
                        .HasForeignKey("MaintenanceContactID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceLineInput", "MaintenanceContactInput")
                        .WithMany("MaintenanceContactInputLines")
                        .HasForeignKey("MaintenanceContactInputID");

                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceLineInput", "OwnerInput")
                        .WithMany("OwnerInputLines")
                        .HasForeignKey("OwnerInputID");

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("RejectByID");

                    b.HasOne("PmsEteck.Data.Models.ServiceInvoice", "ServiceInvoice")
                        .WithMany("ServiceInvoiceLines")
                        .HasForeignKey("ServiceInvoiceID");

                    b.HasOne("PmsEteck.Data.Models.WorkOrder", "WorkOrder")
                        .WithOne("ServiceInvoiceLine")
                        .HasForeignKey("PmsEteck.Data.Models.ServiceInvoiceLine", "ServiceInvoiceLineID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceLineStatus", "Status")
                        .WithMany("ServiceInvoiceLines")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceInvoiceLineInput", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "User")
                        .WithMany("ServiceInvoiceLineInputs")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceMessage", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ServiceTicket", "ServiceTicket")
                        .WithMany("Messages")
                        .HasForeignKey("ServiceTicketID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceRun", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Service", "Service")
                        .WithMany("ServiceRuns")
                        .HasForeignKey("iServiceKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceRunError", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ServiceRun", "ServiceRun")
                        .WithMany("ServiceRunErrors")
                        .HasForeignKey("iServiceRunKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ServiceTicket", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("DebtorID");

                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("MaintenanceContactID");

                    b.HasOne("PmsEteck.Data.Models.Occupant", "Occupant")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("OccupantID");

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ServiceTicketType", "Type")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("ServiceTicketTypeID");

                    b.HasOne("PmsEteck.Data.Models.ServiceTicketStatus", "Status")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Ticket", "Ticket")
                        .WithOne("ServiceTicket")
                        .HasForeignKey("PmsEteck.Data.Models.ServiceTicket", "TicketiTicketID");

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "User")
                        .WithMany("ServiceTickets")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Subsidy", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("Subsidies")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.SubsidyCategory", "SubsidyCategory")
                        .WithMany()
                        .HasForeignKey("iSubsidyCategoryKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.Ticket", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.MailConfig", "MailConfig")
                        .WithMany("Tickets")
                        .HasForeignKey("MailConfigID");

                    b.HasOne("PmsEteck.Data.Models.Address", "Address")
                        .WithMany("Tickets")
                        .HasForeignKey("iAddressID");

                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("Tickets")
                        .HasForeignKey("iDebtorID");

                    b.HasOne("PmsEteck.Data.Models.Occupant", "Occupant")
                        .WithMany("Tickets")
                        .HasForeignKey("iOccupantID");

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "Project")
                        .WithMany("Tickets")
                        .HasForeignKey("iProjectID");

                    b.HasOne("PmsEteck.Data.Models.ResponseConcept", "ResponseConcept")
                        .WithOne("Ticket")
                        .HasForeignKey("PmsEteck.Data.Models.Ticket", "iTicketID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.TicketStatus", "TicketStatus")
                        .WithMany("Ticket")
                        .HasForeignKey("iTicketStatusID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.TicketType", "TicketType")
                        .WithMany("Ticket")
                        .HasForeignKey("iTicketTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Tickets")
                        .HasForeignKey("sUserID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TicketLabel", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Label", "Label")
                        .WithMany("Tickets")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.Ticket", "Ticket")
                        .WithMany("Labels")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.TicketLog", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Ticket", "Ticket")
                        .WithMany("TicketLogs")
                        .HasForeignKey("iTicketID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("TicketLogs")
                        .HasForeignKey("sUserID");
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WeqMutation", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.DispensingUnit", "DispensingUnit")
                        .WithMany()
                        .HasForeignKey("iDispensingUnitKey");

                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("WeqMutations")
                        .HasForeignKey("iProjectKey")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.WeqCategory", "WeqCategory")
                        .WithMany()
                        .HasForeignKey("iWeqCategoryKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WorkOrder", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ServiceInvoiceLineInput", "MechanicInput")
                        .WithMany("WorkOrders")
                        .HasForeignKey("MechanicInputID");

                    b.HasOne("PmsEteck.Data.Models.ServiceTicket", "ServiceTicket")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ServiceTicketID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.SolutionCategory", "SolutionCategory")
                        .WithMany("WorkOrders")
                        .HasForeignKey("SolutionCategoryID");

                    b.HasOne("PmsEteck.Data.Models.WorkOrderStatus", "Status")
                        .WithMany("WorkOrders")
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.YearDegreeDayIndex", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.BudgetSetting", "BudgetSetting")
                        .WithMany("YearDegreeDayIndex")
                        .HasForeignKey("iBudgetSettingKey")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.CounterTypeYearSeasonPattern", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.CounterType", "CounterType")
                        .WithMany()
                        .HasForeignKey("CounterTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.ProjectYearDetail", "ProjectYearDetail")
                        .WithMany("CounterTypeYearCurves")
                        .HasForeignKey("ProjectYearDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PmsEteck.Data.Models.SeasonalPattern", "SeasonalPattern")
                        .WithMany()
                        .HasForeignKey("SeasonalPatternId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.NoInvoicePeriods", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.Debtor", "Debtor")
                        .WithMany("NoInvoicePeriods")
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.PeriodPercentage", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.SeasonalPattern", "SeasonalPattern")
                        .WithMany("PeriodPercentages")
                        .HasForeignKey("SeasonalPatternId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.ProjectYearDetail", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.ProjectInfo", "ProjectInfo")
                        .WithMany("ProjectYearDetails")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PmsEteck.Data.Models.WebserviceConnection", b =>
                {
                    b.HasOne("PmsEteck.Data.Models.MaintenanceContact", "MaintenanceContact")
                        .WithMany("WebserviceConnections")
                        .HasForeignKey("MaintenanceContactID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
