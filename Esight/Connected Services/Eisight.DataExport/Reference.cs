//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eisight.DataExport
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.esightenergy.com/esight/WS/", ConfigurationName="Eisight.DataExport.DataExportSoap")]
    public interface DataExportSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetLatestData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetLatestDataAsync(string siteMeterCodes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetLatestReading", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetLatestReadingAsync(string siteMeterCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetDataAsync(string siteMeterCodes, System.DateTime fromDate, System.DateTime toDate, string intervalName, bool showMeterNameAsHeader, bool replaceNullValuesWithZero, bool showRawValues, bool groupByMeter, string applyContract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetDataForExcel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetDataForExcelAsync(string u, string pw, string siteMeterCodes, System.DateTime from, System.DateTime to, string interval, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetDataAsObjectsSecurityContext", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.MeterValue[]> GetDataAsObjectsSecurityContextAsync(string siteMeterCodes, System.DateTime from, System.DateTime to, string interval, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetDataAsObjects", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.MeterValue[]> GetDataAsObjectsAsync(string u, string pw, string siteMeterCodes, System.DateTime from, System.DateTime to, string interval, string contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/ElecContractAnalysis", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> ElecContractAnalysisAsync(int meterID, System.DateTime fromDate, System.DateTime toDate, int intervalID, bool showMaximumDemand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/ElecContractAnalysisForExcel", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> ElecContractAnalysisForExcelAsync(string username, string password, int meterID, System.DateTime fromDate, System.DateTime toDate, int intervalID, bool showMaximumDemand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/CalcAverageConsumption", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<double> CalcAverageConsumptionAsync(string siteMeterCode, string calculateFrom, int calculationType, int multiple);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.esightenergy.com/esight/WS/")]
    public partial class MeterValue
    {
        
        private string timestampValueField;
        
        private string timeStampLabelField;
        
        private System.DateTime timeStampRoundedField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string TimestampValue
        {
            get
            {
                return this.timestampValueField;
            }
            set
            {
                this.timestampValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string TimeStampLabel
        {
            get
            {
                return this.timeStampLabelField;
            }
            set
            {
                this.timeStampLabelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.DateTime TimeStampRounded
        {
            get
            {
                return this.timeStampRoundedField;
            }
            set
            {
                this.timeStampRoundedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public double Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    public interface DataExportSoapChannel : Eisight.DataExport.DataExportSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    public partial class DataExportSoapClient : System.ServiceModel.ClientBase<Eisight.DataExport.DataExportSoap>, Eisight.DataExport.DataExportSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public DataExportSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(DataExportSoapClient.GetBindingForEndpoint(endpointConfiguration), DataExportSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataExportSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(DataExportSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataExportSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(DataExportSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public DataExportSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetLatestDataAsync(string siteMeterCodes)
        {
            return base.Channel.GetLatestDataAsync(siteMeterCodes);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetLatestReadingAsync(string siteMeterCode)
        {
            return base.Channel.GetLatestReadingAsync(siteMeterCode);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetDataAsync(string siteMeterCodes, System.DateTime fromDate, System.DateTime toDate, string intervalName, bool showMeterNameAsHeader, bool replaceNullValuesWithZero, bool showRawValues, bool groupByMeter, string applyContract)
        {
            return base.Channel.GetDataAsync(siteMeterCodes, fromDate, toDate, intervalName, showMeterNameAsHeader, replaceNullValuesWithZero, showRawValues, groupByMeter, applyContract);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> GetDataForExcelAsync(string u, string pw, string siteMeterCodes, System.DateTime from, System.DateTime to, string interval, string contract)
        {
            return base.Channel.GetDataForExcelAsync(u, pw, siteMeterCodes, from, to, interval, contract);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.MeterValue[]> GetDataAsObjectsSecurityContextAsync(string siteMeterCodes, System.DateTime from, System.DateTime to, string interval, string contract)
        {
            return base.Channel.GetDataAsObjectsSecurityContextAsync(siteMeterCodes, from, to, interval, contract);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.MeterValue[]> GetDataAsObjectsAsync(string u, string pw, string siteMeterCodes, System.DateTime from, System.DateTime to, string interval, string contract)
        {
            return base.Channel.GetDataAsObjectsAsync(u, pw, siteMeterCodes, from, to, interval, contract);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> ElecContractAnalysisAsync(int meterID, System.DateTime fromDate, System.DateTime toDate, int intervalID, bool showMaximumDemand)
        {
            return base.Channel.ElecContractAnalysisAsync(meterID, fromDate, toDate, intervalID, showMaximumDemand);
        }
        
        public System.Threading.Tasks.Task<Eisight.DataExport.ArrayOfXElement> ElecContractAnalysisForExcelAsync(string username, string password, int meterID, System.DateTime fromDate, System.DateTime toDate, int intervalID, bool showMaximumDemand)
        {
            return base.Channel.ElecContractAnalysisForExcelAsync(username, password, meterID, fromDate, toDate, intervalID, showMaximumDemand);
        }
        
        public System.Threading.Tasks.Task<double> CalcAverageConsumptionAsync(string siteMeterCode, string calculateFrom, int calculationType, int multiple)
        {
            return base.Channel.CalcAverageConsumptionAsync(siteMeterCode, calculateFrom, calculationType, multiple);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DataExportSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.DataExportSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.DataExportSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://esight.esightmonitoring.nl/eteck/ws/DataExport.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.DataExportSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://esight.esightmonitoring.nl/eteck/ws/DataExport.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            DataExportSoap,
            
            DataExportSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
