//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Esight.UserLogin
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.esightenergy.com/esight/WS/", ConfigurationName="Esight.UserLogin.UserLoginSoap")]
    public interface UserLoginSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/LoginUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<Esight.UserLogin.LoginUserResponse> LoginUserAsync(Esight.UserLogin.LoginUserRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/LoginUserUsernamePassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> LoginUserUsernamePasswordAsync(string username, string password, bool encrypted);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/LoginUserAndImpersonateUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> LoginUserAndImpersonateUserAsync(string username, string password, bool encrypted, string userToImpersonate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/IsAuthenticated", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> IsAuthenticatedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/LogOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task LogOutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.esightenergy.com/esight/WS/GetTimeStamp", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<System.DateTime> GetTimeStampAsync();
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.esightenergy.com/esight/WS/")]
    public partial class SecurityContext
    {
        
        private string userIdField;
        
        private string passwordField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string userId
        {
            get
            {
                return this.userIdField;
            }
            set
            {
                this.userIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginUser", WrapperNamespace="http://www.esightenergy.com/esight/WS/", IsWrapped=true)]
    public partial class LoginUserRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.esightenergy.com/esight/WS/")]
        public Esight.UserLogin.SecurityContext SecurityContext;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.esightenergy.com/esight/WS/", Order=0)]
        public bool encrypted;
        
        public LoginUserRequest()
        {
        }
        
        public LoginUserRequest(Esight.UserLogin.SecurityContext SecurityContext, bool encrypted)
        {
            this.SecurityContext = SecurityContext;
            this.encrypted = encrypted;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginUserResponse", WrapperNamespace="http://www.esightenergy.com/esight/WS/", IsWrapped=true)]
    public partial class LoginUserResponse
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://www.esightenergy.com/esight/WS/")]
        public Esight.UserLogin.SecurityContext SecurityContext;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.esightenergy.com/esight/WS/", Order=0)]
        public bool LoginUserResult;
        
        public LoginUserResponse()
        {
        }
        
        public LoginUserResponse(Esight.UserLogin.SecurityContext SecurityContext, bool LoginUserResult)
        {
            this.SecurityContext = SecurityContext;
            this.LoginUserResult = LoginUserResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    public interface UserLoginSoapChannel : Esight.UserLogin.UserLoginSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0-preview-30131-0887")]
    public partial class UserLoginSoapClient : System.ServiceModel.ClientBase<Esight.UserLogin.UserLoginSoap>, Esight.UserLogin.UserLoginSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public UserLoginSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(UserLoginSoapClient.GetBindingForEndpoint(endpointConfiguration), UserLoginSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserLoginSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(UserLoginSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserLoginSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(UserLoginSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public UserLoginSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Esight.UserLogin.LoginUserResponse> Esight.UserLogin.UserLoginSoap.LoginUserAsync(Esight.UserLogin.LoginUserRequest request)
        {
            return base.Channel.LoginUserAsync(request);
        }
        
        public System.Threading.Tasks.Task<Esight.UserLogin.LoginUserResponse> LoginUserAsync(Esight.UserLogin.SecurityContext SecurityContext, bool encrypted)
        {
            Esight.UserLogin.LoginUserRequest inValue = new Esight.UserLogin.LoginUserRequest();
            inValue.SecurityContext = SecurityContext;
            inValue.encrypted = encrypted;
            return ((Esight.UserLogin.UserLoginSoap)(this)).LoginUserAsync(inValue);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserUsernamePasswordAsync(string username, string password, bool encrypted)
        {
            return base.Channel.LoginUserUsernamePasswordAsync(username, password, encrypted);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAndImpersonateUserAsync(string username, string password, bool encrypted, string userToImpersonate)
        {
            return base.Channel.LoginUserAndImpersonateUserAsync(username, password, encrypted, userToImpersonate);
        }
        
        public System.Threading.Tasks.Task<bool> IsAuthenticatedAsync()
        {
            return base.Channel.IsAuthenticatedAsync();
        }
        
        public System.Threading.Tasks.Task LogOutAsync()
        {
            return base.Channel.LogOutAsync();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetTimeStampAsync()
        {
            return base.Channel.GetTimeStampAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.UserLoginSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.UserLoginSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.UserLoginSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://esight.esightmonitoring.nl/eteck/ws/UserLogin.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.UserLoginSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://esight.esightmonitoring.nl/eteck/ws/UserLogin.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            UserLoginSoap,
            
            UserLoginSoap12,
        }
    }
}
